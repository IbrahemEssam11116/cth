//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.6.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SStorm.CTH.DAL.HelperClasses;
using SStorm.CTH.DAL.FactoryClasses;
using SStorm.CTH.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SStorm.CTH.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'CTHImaging'.<br/><br/></summary>
	[Serializable]
	public partial class CTHImagingEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<CTHPatientImagingEntity> _cTHPatientImagingCollection;
		private EntityCollection<CTHPatientClinicalDataEntity> _cTHPatientClinicalDataCollectionViaCTHPatientImaging;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CTHImagingEntityStaticMetaData _staticMetaData = new CTHImagingEntityStaticMetaData();
		private static CTHImagingRelations _relationsFactory = new CTHImagingRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CTHPatientImagingCollection</summary>
			public static readonly string CTHPatientImagingCollection = "CTHPatientImagingCollection";
			/// <summary>Member name CTHPatientClinicalDataCollectionViaCTHPatientImaging</summary>
			public static readonly string CTHPatientClinicalDataCollectionViaCTHPatientImaging = "CTHPatientClinicalDataCollectionViaCTHPatientImaging";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CTHImagingEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CTHImagingEntityStaticMetaData()
			{
				SetEntityCoreInfo("CTHImagingEntity", InheritanceHierarchyType.None, false, (int)SStorm.CTH.DAL.EntityType.CTHImagingEntity, typeof(CTHImagingEntity), typeof(CTHImagingEntityFactory), false);
				AddNavigatorMetaData<CTHImagingEntity, EntityCollection<CTHPatientImagingEntity>>("CTHPatientImagingCollection", a => a._cTHPatientImagingCollection, (a, b) => a._cTHPatientImagingCollection = b, a => a.CTHPatientImagingCollection, () => new CTHImagingRelations().CTHPatientImagingEntityUsingImagingTypeID, typeof(CTHPatientImagingEntity), (int)SStorm.CTH.DAL.EntityType.CTHPatientImagingEntity);
				AddNavigatorMetaData<CTHImagingEntity, EntityCollection<CTHPatientClinicalDataEntity>>("CTHPatientClinicalDataCollectionViaCTHPatientImaging", a => a._cTHPatientClinicalDataCollectionViaCTHPatientImaging, (a, b) => a._cTHPatientClinicalDataCollectionViaCTHPatientImaging = b, a => a.CTHPatientClinicalDataCollectionViaCTHPatientImaging, () => new CTHImagingRelations().CTHPatientImagingEntityUsingImagingTypeID, () => new CTHPatientImagingRelations().CTHPatientClinicalDataEntityUsingPatientClinicalDataID, "CTHImagingEntity__", "CTHPatientImaging_", typeof(CTHPatientClinicalDataEntity), (int)SStorm.CTH.DAL.EntityType.CTHPatientClinicalDataEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CTHImagingEntity()
		{
		}

		/// <summary> CTor</summary>
		public CTHImagingEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CTHImagingEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CTHImagingEntity</param>
		public CTHImagingEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHImaging which data should be fetched into this CTHImaging object</param>
		public CTHImagingEntity(System.Int32 iD) : this(iD, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHImaging which data should be fetched into this CTHImaging object</param>
		/// <param name="validator">The custom validator object for this CTHImagingEntity</param>
		public CTHImagingEntity(System.Int32 iD, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ID = iD;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CTHImagingEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHPatientImaging' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientImagingCollection() { return CreateRelationInfoForNavigator("CTHPatientImagingCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHPatientClinicalData' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientClinicalDataCollectionViaCTHPatientImaging() { return CreateRelationInfoForNavigator("CTHPatientClinicalDataCollectionViaCTHPatientImaging"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CTHImagingEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CTHImagingRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatientImaging' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientImagingCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientImagingCollection", CommonEntityBase.CreateEntityCollection<CTHPatientImagingEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatientClinicalData' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientClinicalDataCollectionViaCTHPatientImaging { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientClinicalDataCollectionViaCTHPatientImaging", CommonEntityBase.CreateEntityCollection<CTHPatientClinicalDataEntity>()); } }

		/// <summary>The ArImageName property of the Entity CTHImaging<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHImaging"."ArImageName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArImageName
		{
			get { return (System.String)GetValue((int)CTHImagingFieldIndex.ArImageName, true); }
			set	{ SetValue((int)CTHImagingFieldIndex.ArImageName, value); }
		}

		/// <summary>The ArRemarks property of the Entity CTHImaging<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHImaging"."ArRemarks".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArRemarks
		{
			get { return (System.String)GetValue((int)CTHImagingFieldIndex.ArRemarks, true); }
			set	{ SetValue((int)CTHImagingFieldIndex.ArRemarks, value); }
		}

		/// <summary>The ID property of the Entity CTHImaging<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHImaging"."ID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ID
		{
			get { return (System.Int32)GetValue((int)CTHImagingFieldIndex.ID, true); }
			set { SetValue((int)CTHImagingFieldIndex.ID, value); }		}

		/// <summary>The ImageName property of the Entity CTHImaging<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHImaging"."ImageName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ImageName
		{
			get { return (System.String)GetValue((int)CTHImagingFieldIndex.ImageName, true); }
			set	{ SetValue((int)CTHImagingFieldIndex.ImageName, value); }
		}

		/// <summary>The Remarks property of the Entity CTHImaging<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHImaging"."Remarks".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Remarks
		{
			get { return (System.String)GetValue((int)CTHImagingFieldIndex.Remarks, true); }
			set	{ SetValue((int)CTHImagingFieldIndex.Remarks, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHPatientImagingEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHPatientImagingEntity))]
		public virtual EntityCollection<CTHPatientImagingEntity> CTHPatientImagingCollection { get { return GetOrCreateEntityCollection<CTHPatientImagingEntity, CTHPatientImagingEntityFactory>("CTHImagingItem", true, false, ref _cTHPatientImagingCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHPatientClinicalDataEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHPatientClinicalDataEntity))]
		public virtual EntityCollection<CTHPatientClinicalDataEntity> CTHPatientClinicalDataCollectionViaCTHPatientImaging { get { return GetOrCreateEntityCollection<CTHPatientClinicalDataEntity, CTHPatientClinicalDataEntityFactory>("CTHImagingCollectionViaCTHPatientImaging", false, true, ref _cTHPatientClinicalDataCollectionViaCTHPatientImaging); } }
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace SStorm.CTH.DAL
{
	public enum CTHImagingFieldIndex
	{
		///<summary>ArImageName. </summary>
		ArImageName,
		///<summary>ArRemarks. </summary>
		ArRemarks,
		///<summary>ID. </summary>
		ID,
		///<summary>ImageName. </summary>
		ImageName,
		///<summary>Remarks. </summary>
		Remarks,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SStorm.CTH.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CTHImaging. </summary>
	public partial class CTHImagingRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between CTHImagingEntity and CTHPatientImagingEntity over the 1:n relation they have, using the relation between the fields: CTHImaging.ID - CTHPatientImaging.ImagingTypeID</summary>
		public virtual IEntityRelation CTHPatientImagingEntityUsingImagingTypeID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHPatientImagingCollection", true, new[] { CTHImagingFields.ID, CTHPatientImagingFields.ImagingTypeID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCTHImagingRelations
	{
		internal static readonly IEntityRelation CTHPatientImagingEntityUsingImagingTypeIDStatic = new CTHImagingRelations().CTHPatientImagingEntityUsingImagingTypeID;

		/// <summary>CTor</summary>
		static StaticCTHImagingRelations() { }
	}
}
