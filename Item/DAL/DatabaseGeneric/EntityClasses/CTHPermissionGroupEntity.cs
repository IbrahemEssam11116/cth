//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.6.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SStorm.CTH.DAL.HelperClasses;
using SStorm.CTH.DAL.FactoryClasses;
using SStorm.CTH.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SStorm.CTH.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'CTHPermissionGroup'.<br/><br/></summary>
	[Serializable]
	public partial class CTHPermissionGroupEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<CTHPermissionEntity> _cTHPermissionCollection;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CTHPermissionGroupEntityStaticMetaData _staticMetaData = new CTHPermissionGroupEntityStaticMetaData();
		private static CTHPermissionGroupRelations _relationsFactory = new CTHPermissionGroupRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CTHPermissionCollection</summary>
			public static readonly string CTHPermissionCollection = "CTHPermissionCollection";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CTHPermissionGroupEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CTHPermissionGroupEntityStaticMetaData()
			{
				SetEntityCoreInfo("CTHPermissionGroupEntity", InheritanceHierarchyType.None, false, (int)SStorm.CTH.DAL.EntityType.CTHPermissionGroupEntity, typeof(CTHPermissionGroupEntity), typeof(CTHPermissionGroupEntityFactory), false);
				AddNavigatorMetaData<CTHPermissionGroupEntity, EntityCollection<CTHPermissionEntity>>("CTHPermissionCollection", a => a._cTHPermissionCollection, (a, b) => a._cTHPermissionCollection = b, a => a.CTHPermissionCollection, () => new CTHPermissionGroupRelations().CTHPermissionEntityUsingGroupID, typeof(CTHPermissionEntity), (int)SStorm.CTH.DAL.EntityType.CTHPermissionEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CTHPermissionGroupEntity()
		{
		}

		/// <summary> CTor</summary>
		public CTHPermissionGroupEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CTHPermissionGroupEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CTHPermissionGroupEntity</param>
		public CTHPermissionGroupEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHPermissionGroup which data should be fetched into this CTHPermissionGroup object</param>
		public CTHPermissionGroupEntity(System.Int32 iD) : this(iD, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHPermissionGroup which data should be fetched into this CTHPermissionGroup object</param>
		/// <param name="validator">The custom validator object for this CTHPermissionGroupEntity</param>
		public CTHPermissionGroupEntity(System.Int32 iD, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ID = iD;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CTHPermissionGroupEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHPermission' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPermissionCollection() { return CreateRelationInfoForNavigator("CTHPermissionCollection"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CTHPermissionGroupEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CTHPermissionGroupRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPermission' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPermissionCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHPermissionCollection", CommonEntityBase.CreateEntityCollection<CTHPermissionEntity>()); } }

		/// <summary>The ArGroupName property of the Entity CTHPermissionGroup<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPermissionGroup"."ArGroupName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArGroupName
		{
			get { return (System.String)GetValue((int)CTHPermissionGroupFieldIndex.ArGroupName, true); }
			set	{ SetValue((int)CTHPermissionGroupFieldIndex.ArGroupName, value); }
		}

		/// <summary>The GroupName property of the Entity CTHPermissionGroup<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPermissionGroup"."GroupName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String GroupName
		{
			get { return (System.String)GetValue((int)CTHPermissionGroupFieldIndex.GroupName, true); }
			set	{ SetValue((int)CTHPermissionGroupFieldIndex.GroupName, value); }
		}

		/// <summary>The ID property of the Entity CTHPermissionGroup<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPermissionGroup"."ID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 ID
		{
			get { return (System.Int32)GetValue((int)CTHPermissionGroupFieldIndex.ID, true); }
			set	{ SetValue((int)CTHPermissionGroupFieldIndex.ID, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHPermissionEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHPermissionEntity))]
		public virtual EntityCollection<CTHPermissionEntity> CTHPermissionCollection { get { return GetOrCreateEntityCollection<CTHPermissionEntity, CTHPermissionEntityFactory>("CTHPermissionGroupItem", true, false, ref _cTHPermissionCollection); } }
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace SStorm.CTH.DAL
{
	public enum CTHPermissionGroupFieldIndex
	{
		///<summary>ArGroupName. </summary>
		ArGroupName,
		///<summary>GroupName. </summary>
		GroupName,
		///<summary>ID. </summary>
		ID,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SStorm.CTH.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CTHPermissionGroup. </summary>
	public partial class CTHPermissionGroupRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between CTHPermissionGroupEntity and CTHPermissionEntity over the 1:n relation they have, using the relation between the fields: CTHPermissionGroup.ID - CTHPermission.GroupID</summary>
		public virtual IEntityRelation CTHPermissionEntityUsingGroupID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHPermissionCollection", true, new[] { CTHPermissionGroupFields.ID, CTHPermissionFields.GroupID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCTHPermissionGroupRelations
	{
		internal static readonly IEntityRelation CTHPermissionEntityUsingGroupIDStatic = new CTHPermissionGroupRelations().CTHPermissionEntityUsingGroupID;

		/// <summary>CTor</summary>
		static StaticCTHPermissionGroupRelations() { }
	}
}
