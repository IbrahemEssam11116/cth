//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.6.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SStorm.CTH.DAL.HelperClasses;
using SStorm.CTH.DAL.FactoryClasses;
using SStorm.CTH.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SStorm.CTH.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'CTHPatientPathologyReport'.<br/><br/></summary>
	[Serializable]
	public partial class CTHPatientPathologyReportEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private CTHPathologyReportTypeEntity _cTHPathologyReportTypeItem;
		private CTHPatientClinicalDataEntity _cTHPatientClinicalDataItem;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CTHPatientPathologyReportEntityStaticMetaData _staticMetaData = new CTHPatientPathologyReportEntityStaticMetaData();
		private static CTHPatientPathologyReportRelations _relationsFactory = new CTHPatientPathologyReportRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CTHPathologyReportTypeItem</summary>
			public static readonly string CTHPathologyReportTypeItem = "CTHPathologyReportTypeItem";
			/// <summary>Member name CTHPatientClinicalDataItem</summary>
			public static readonly string CTHPatientClinicalDataItem = "CTHPatientClinicalDataItem";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CTHPatientPathologyReportEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CTHPatientPathologyReportEntityStaticMetaData()
			{
				SetEntityCoreInfo("CTHPatientPathologyReportEntity", InheritanceHierarchyType.None, false, (int)SStorm.CTH.DAL.EntityType.CTHPatientPathologyReportEntity, typeof(CTHPatientPathologyReportEntity), typeof(CTHPatientPathologyReportEntityFactory), false);
				AddNavigatorMetaData<CTHPatientPathologyReportEntity, CTHPathologyReportTypeEntity>("CTHPathologyReportTypeItem", "CTHPatientPathologyReportCollection", (a, b) => a._cTHPathologyReportTypeItem = b, a => a._cTHPathologyReportTypeItem, (a, b) => a.CTHPathologyReportTypeItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHPatientPathologyReportRelations.CTHPathologyReportTypeEntityUsingReportTypeIDStatic, ()=>new CTHPatientPathologyReportRelations().CTHPathologyReportTypeEntityUsingReportTypeID, null, new int[] { (int)CTHPatientPathologyReportFieldIndex.ReportTypeID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHPathologyReportTypeEntity);
				AddNavigatorMetaData<CTHPatientPathologyReportEntity, CTHPatientClinicalDataEntity>("CTHPatientClinicalDataItem", "CTHPatientPathologyReportCollection", (a, b) => a._cTHPatientClinicalDataItem = b, a => a._cTHPatientClinicalDataItem, (a, b) => a.CTHPatientClinicalDataItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHPatientPathologyReportRelations.CTHPatientClinicalDataEntityUsingPatienClinicalDataIDStatic, ()=>new CTHPatientPathologyReportRelations().CTHPatientClinicalDataEntityUsingPatienClinicalDataID, null, new int[] { (int)CTHPatientPathologyReportFieldIndex.PatienClinicalDataID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHPatientClinicalDataEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CTHPatientPathologyReportEntity()
		{
		}

		/// <summary> CTor</summary>
		public CTHPatientPathologyReportEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CTHPatientPathologyReportEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CTHPatientPathologyReportEntity</param>
		public CTHPatientPathologyReportEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHPatientPathologyReport which data should be fetched into this CTHPatientPathologyReport object</param>
		public CTHPatientPathologyReportEntity(System.Int32 iD) : this(iD, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHPatientPathologyReport which data should be fetched into this CTHPatientPathologyReport object</param>
		/// <param name="validator">The custom validator object for this CTHPatientPathologyReportEntity</param>
		public CTHPatientPathologyReportEntity(System.Int32 iD, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ID = iD;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CTHPatientPathologyReportEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHPathologyReportType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPathologyReportTypeItem() { return CreateRelationInfoForNavigator("CTHPathologyReportTypeItem"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHPatientClinicalData' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientClinicalDataItem() { return CreateRelationInfoForNavigator("CTHPatientClinicalDataItem"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CTHPatientPathologyReportEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CTHPatientPathologyReportRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPathologyReportType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPathologyReportTypeItem { get { return _staticMetaData.GetPrefetchPathElement("CTHPathologyReportTypeItem", CommonEntityBase.CreateEntityCollection<CTHPathologyReportTypeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatientClinicalData' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientClinicalDataItem { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientClinicalDataItem", CommonEntityBase.CreateEntityCollection<CTHPatientClinicalDataEntity>()); } }

		/// <summary>The ID property of the Entity CTHPatientPathologyReport<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientPathologyReport"."ID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ID
		{
			get { return (System.Int32)GetValue((int)CTHPatientPathologyReportFieldIndex.ID, true); }
			set { SetValue((int)CTHPatientPathologyReportFieldIndex.ID, value); }		}

		/// <summary>The PatienClinicalDataID property of the Entity CTHPatientPathologyReport<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientPathologyReport"."PatienClinicalDataID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> PatienClinicalDataID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHPatientPathologyReportFieldIndex.PatienClinicalDataID, false); }
			set	{ SetValue((int)CTHPatientPathologyReportFieldIndex.PatienClinicalDataID, value); }
		}

		/// <summary>The Report property of the Entity CTHPatientPathologyReport<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientPathologyReport"."Report".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Report
		{
			get { return (System.String)GetValue((int)CTHPatientPathologyReportFieldIndex.Report, true); }
			set	{ SetValue((int)CTHPatientPathologyReportFieldIndex.Report, value); }
		}

		/// <summary>The ReportTypeID property of the Entity CTHPatientPathologyReport<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientPathologyReport"."ReportTypeID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> ReportTypeID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHPatientPathologyReportFieldIndex.ReportTypeID, false); }
			set	{ SetValue((int)CTHPatientPathologyReportFieldIndex.ReportTypeID, value); }
		}

		/// <summary>Gets / sets related entity of type 'CTHPathologyReportTypeEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHPathologyReportTypeEntity CTHPathologyReportTypeItem
		{
			get { return _cTHPathologyReportTypeItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHPathologyReportTypeItem"); }
		}

		/// <summary>Gets / sets related entity of type 'CTHPatientClinicalDataEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHPatientClinicalDataEntity CTHPatientClinicalDataItem
		{
			get { return _cTHPatientClinicalDataItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHPatientClinicalDataItem"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace SStorm.CTH.DAL
{
	public enum CTHPatientPathologyReportFieldIndex
	{
		///<summary>ID. </summary>
		ID,
		///<summary>PatienClinicalDataID. </summary>
		PatienClinicalDataID,
		///<summary>Report. </summary>
		Report,
		///<summary>ReportTypeID. </summary>
		ReportTypeID,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SStorm.CTH.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CTHPatientPathologyReport. </summary>
	public partial class CTHPatientPathologyReportRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between CTHPatientPathologyReportEntity and CTHPathologyReportTypeEntity over the m:1 relation they have, using the relation between the fields: CTHPatientPathologyReport.ReportTypeID - CTHPathologyReportType.ID</summary>
		public virtual IEntityRelation CTHPathologyReportTypeEntityUsingReportTypeID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHPathologyReportTypeItem", false, new[] { CTHPathologyReportTypeFields.ID, CTHPatientPathologyReportFields.ReportTypeID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHPatientPathologyReportEntity and CTHPatientClinicalDataEntity over the m:1 relation they have, using the relation between the fields: CTHPatientPathologyReport.PatienClinicalDataID - CTHPatientClinicalData.ID</summary>
		public virtual IEntityRelation CTHPatientClinicalDataEntityUsingPatienClinicalDataID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHPatientClinicalDataItem", false, new[] { CTHPatientClinicalDataFields.ID, CTHPatientPathologyReportFields.PatienClinicalDataID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCTHPatientPathologyReportRelations
	{
		internal static readonly IEntityRelation CTHPathologyReportTypeEntityUsingReportTypeIDStatic = new CTHPatientPathologyReportRelations().CTHPathologyReportTypeEntityUsingReportTypeID;
		internal static readonly IEntityRelation CTHPatientClinicalDataEntityUsingPatienClinicalDataIDStatic = new CTHPatientPathologyReportRelations().CTHPatientClinicalDataEntityUsingPatienClinicalDataID;

		/// <summary>CTor</summary>
		static StaticCTHPatientPathologyReportRelations() { }
	}
}
