//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.6.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SStorm.CTH.DAL.HelperClasses;
using SStorm.CTH.DAL.FactoryClasses;
using SStorm.CTH.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SStorm.CTH.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'CTHPermission'.<br/><br/></summary>
	[Serializable]
	public partial class CTHPermissionEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<CTHRolePermissionEntity> _cTHRolePermissionCollection;
		private EntityCollection<CTHRoleEntity> _cTHRoleCollectionViaCTHRolePermission;
		private CTHPermissionGroupEntity _cTHPermissionGroupItem;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CTHPermissionEntityStaticMetaData _staticMetaData = new CTHPermissionEntityStaticMetaData();
		private static CTHPermissionRelations _relationsFactory = new CTHPermissionRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CTHPermissionGroupItem</summary>
			public static readonly string CTHPermissionGroupItem = "CTHPermissionGroupItem";
			/// <summary>Member name CTHRolePermissionCollection</summary>
			public static readonly string CTHRolePermissionCollection = "CTHRolePermissionCollection";
			/// <summary>Member name CTHRoleCollectionViaCTHRolePermission</summary>
			public static readonly string CTHRoleCollectionViaCTHRolePermission = "CTHRoleCollectionViaCTHRolePermission";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CTHPermissionEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CTHPermissionEntityStaticMetaData()
			{
				SetEntityCoreInfo("CTHPermissionEntity", InheritanceHierarchyType.None, false, (int)SStorm.CTH.DAL.EntityType.CTHPermissionEntity, typeof(CTHPermissionEntity), typeof(CTHPermissionEntityFactory), false);
				AddNavigatorMetaData<CTHPermissionEntity, EntityCollection<CTHRolePermissionEntity>>("CTHRolePermissionCollection", a => a._cTHRolePermissionCollection, (a, b) => a._cTHRolePermissionCollection = b, a => a.CTHRolePermissionCollection, () => new CTHPermissionRelations().CTHRolePermissionEntityUsingPermissionID, typeof(CTHRolePermissionEntity), (int)SStorm.CTH.DAL.EntityType.CTHRolePermissionEntity);
				AddNavigatorMetaData<CTHPermissionEntity, CTHPermissionGroupEntity>("CTHPermissionGroupItem", "CTHPermissionCollection", (a, b) => a._cTHPermissionGroupItem = b, a => a._cTHPermissionGroupItem, (a, b) => a.CTHPermissionGroupItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHPermissionRelations.CTHPermissionGroupEntityUsingGroupIDStatic, ()=>new CTHPermissionRelations().CTHPermissionGroupEntityUsingGroupID, null, new int[] { (int)CTHPermissionFieldIndex.GroupID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHPermissionGroupEntity);
				AddNavigatorMetaData<CTHPermissionEntity, EntityCollection<CTHRoleEntity>>("CTHRoleCollectionViaCTHRolePermission", a => a._cTHRoleCollectionViaCTHRolePermission, (a, b) => a._cTHRoleCollectionViaCTHRolePermission = b, a => a.CTHRoleCollectionViaCTHRolePermission, () => new CTHPermissionRelations().CTHRolePermissionEntityUsingPermissionID, () => new CTHRolePermissionRelations().CTHRoleEntityUsingRoleID, "CTHPermissionEntity__", "CTHRolePermission_", typeof(CTHRoleEntity), (int)SStorm.CTH.DAL.EntityType.CTHRoleEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CTHPermissionEntity()
		{
		}

		/// <summary> CTor</summary>
		public CTHPermissionEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CTHPermissionEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CTHPermissionEntity</param>
		public CTHPermissionEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHPermission which data should be fetched into this CTHPermission object</param>
		public CTHPermissionEntity(System.Int32 iD) : this(iD, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHPermission which data should be fetched into this CTHPermission object</param>
		/// <param name="validator">The custom validator object for this CTHPermissionEntity</param>
		public CTHPermissionEntity(System.Int32 iD, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ID = iD;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CTHPermissionEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHRolePermission' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHRolePermissionCollection() { return CreateRelationInfoForNavigator("CTHRolePermissionCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHRole' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHRoleCollectionViaCTHRolePermission() { return CreateRelationInfoForNavigator("CTHRoleCollectionViaCTHRolePermission"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHPermissionGroup' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPermissionGroupItem() { return CreateRelationInfoForNavigator("CTHPermissionGroupItem"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CTHPermissionEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CTHPermissionRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHRolePermission' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHRolePermissionCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHRolePermissionCollection", CommonEntityBase.CreateEntityCollection<CTHRolePermissionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHRole' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHRoleCollectionViaCTHRolePermission { get { return _staticMetaData.GetPrefetchPathElement("CTHRoleCollectionViaCTHRolePermission", CommonEntityBase.CreateEntityCollection<CTHRoleEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPermissionGroup' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPermissionGroupItem { get { return _staticMetaData.GetPrefetchPathElement("CTHPermissionGroupItem", CommonEntityBase.CreateEntityCollection<CTHPermissionGroupEntity>()); } }

		/// <summary>The ArPermissionName property of the Entity CTHPermission<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPermission"."ArPermissionName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArPermissionName
		{
			get { return (System.String)GetValue((int)CTHPermissionFieldIndex.ArPermissionName, true); }
			set	{ SetValue((int)CTHPermissionFieldIndex.ArPermissionName, value); }
		}

		/// <summary>The GroupID property of the Entity CTHPermission<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPermission"."GroupID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> GroupID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHPermissionFieldIndex.GroupID, false); }
			set	{ SetValue((int)CTHPermissionFieldIndex.GroupID, value); }
		}

		/// <summary>The ID property of the Entity CTHPermission<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPermission"."ID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 ID
		{
			get { return (System.Int32)GetValue((int)CTHPermissionFieldIndex.ID, true); }
			set	{ SetValue((int)CTHPermissionFieldIndex.ID, value); }
		}

		/// <summary>The PermissionName property of the Entity CTHPermission<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPermission"."PermissionName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PermissionName
		{
			get { return (System.String)GetValue((int)CTHPermissionFieldIndex.PermissionName, true); }
			set	{ SetValue((int)CTHPermissionFieldIndex.PermissionName, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHRolePermissionEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHRolePermissionEntity))]
		public virtual EntityCollection<CTHRolePermissionEntity> CTHRolePermissionCollection { get { return GetOrCreateEntityCollection<CTHRolePermissionEntity, CTHRolePermissionEntityFactory>("CTHPermissionItem", true, false, ref _cTHRolePermissionCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHRoleEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHRoleEntity))]
		public virtual EntityCollection<CTHRoleEntity> CTHRoleCollectionViaCTHRolePermission { get { return GetOrCreateEntityCollection<CTHRoleEntity, CTHRoleEntityFactory>("CTHPermissionCollectionViaCTHRolePermission", false, true, ref _cTHRoleCollectionViaCTHRolePermission); } }

		/// <summary>Gets / sets related entity of type 'CTHPermissionGroupEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHPermissionGroupEntity CTHPermissionGroupItem
		{
			get { return _cTHPermissionGroupItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHPermissionGroupItem"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace SStorm.CTH.DAL
{
	public enum CTHPermissionFieldIndex
	{
		///<summary>ArPermissionName. </summary>
		ArPermissionName,
		///<summary>GroupID. </summary>
		GroupID,
		///<summary>ID. </summary>
		ID,
		///<summary>PermissionName. </summary>
		PermissionName,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SStorm.CTH.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CTHPermission. </summary>
	public partial class CTHPermissionRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between CTHPermissionEntity and CTHRolePermissionEntity over the 1:n relation they have, using the relation between the fields: CTHPermission.ID - CTHRolePermission.PermissionID</summary>
		public virtual IEntityRelation CTHRolePermissionEntityUsingPermissionID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHRolePermissionCollection", true, new[] { CTHPermissionFields.ID, CTHRolePermissionFields.PermissionID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHPermissionEntity and CTHPermissionGroupEntity over the m:1 relation they have, using the relation between the fields: CTHPermission.GroupID - CTHPermissionGroup.ID</summary>
		public virtual IEntityRelation CTHPermissionGroupEntityUsingGroupID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHPermissionGroupItem", false, new[] { CTHPermissionGroupFields.ID, CTHPermissionFields.GroupID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCTHPermissionRelations
	{
		internal static readonly IEntityRelation CTHRolePermissionEntityUsingPermissionIDStatic = new CTHPermissionRelations().CTHRolePermissionEntityUsingPermissionID;
		internal static readonly IEntityRelation CTHPermissionGroupEntityUsingGroupIDStatic = new CTHPermissionRelations().CTHPermissionGroupEntityUsingGroupID;

		/// <summary>CTor</summary>
		static StaticCTHPermissionRelations() { }
	}
}
