//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.6.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SStorm.CTH.DAL.HelperClasses;
using SStorm.CTH.DAL.FactoryClasses;
using SStorm.CTH.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SStorm.CTH.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'CTHUserRole'.<br/><br/></summary>
	[Serializable]
	public partial class CTHUserRoleEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private CTHRoleEntity _cTHRoleItem;
		private CTHUserEntity _cTHUserItem;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CTHUserRoleEntityStaticMetaData _staticMetaData = new CTHUserRoleEntityStaticMetaData();
		private static CTHUserRoleRelations _relationsFactory = new CTHUserRoleRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CTHRoleItem</summary>
			public static readonly string CTHRoleItem = "CTHRoleItem";
			/// <summary>Member name CTHUserItem</summary>
			public static readonly string CTHUserItem = "CTHUserItem";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CTHUserRoleEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CTHUserRoleEntityStaticMetaData()
			{
				SetEntityCoreInfo("CTHUserRoleEntity", InheritanceHierarchyType.None, false, (int)SStorm.CTH.DAL.EntityType.CTHUserRoleEntity, typeof(CTHUserRoleEntity), typeof(CTHUserRoleEntityFactory), false);
				AddNavigatorMetaData<CTHUserRoleEntity, CTHRoleEntity>("CTHRoleItem", "CTHUserRoleCollection", (a, b) => a._cTHRoleItem = b, a => a._cTHRoleItem, (a, b) => a.CTHRoleItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHUserRoleRelations.CTHRoleEntityUsingRoleIDStatic, ()=>new CTHUserRoleRelations().CTHRoleEntityUsingRoleID, null, new int[] { (int)CTHUserRoleFieldIndex.RoleID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHRoleEntity);
				AddNavigatorMetaData<CTHUserRoleEntity, CTHUserEntity>("CTHUserItem", "CTHUserRoleCollection", (a, b) => a._cTHUserItem = b, a => a._cTHUserItem, (a, b) => a.CTHUserItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHUserRoleRelations.CTHUserEntityUsingUserIDStatic, ()=>new CTHUserRoleRelations().CTHUserEntityUsingUserID, null, new int[] { (int)CTHUserRoleFieldIndex.UserID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHUserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CTHUserRoleEntity()
		{
		}

		/// <summary> CTor</summary>
		public CTHUserRoleEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CTHUserRoleEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CTHUserRoleEntity</param>
		public CTHUserRoleEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHUserRole which data should be fetched into this CTHUserRole object</param>
		public CTHUserRoleEntity(System.Int32 iD) : this(iD, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHUserRole which data should be fetched into this CTHUserRole object</param>
		/// <param name="validator">The custom validator object for this CTHUserRoleEntity</param>
		public CTHUserRoleEntity(System.Int32 iD, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ID = iD;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CTHUserRoleEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHRole' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHRoleItem() { return CreateRelationInfoForNavigator("CTHRoleItem"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHUser' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHUserItem() { return CreateRelationInfoForNavigator("CTHUserItem"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CTHUserRoleEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CTHUserRoleRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHRole' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHRoleItem { get { return _staticMetaData.GetPrefetchPathElement("CTHRoleItem", CommonEntityBase.CreateEntityCollection<CTHRoleEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHUser' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHUserItem { get { return _staticMetaData.GetPrefetchPathElement("CTHUserItem", CommonEntityBase.CreateEntityCollection<CTHUserEntity>()); } }

		/// <summary>The ID property of the Entity CTHUserRole<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHUserRole"."ID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ID
		{
			get { return (System.Int32)GetValue((int)CTHUserRoleFieldIndex.ID, true); }
			set { SetValue((int)CTHUserRoleFieldIndex.ID, value); }		}

		/// <summary>The RoleID property of the Entity CTHUserRole<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHUserRole"."RoleID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> RoleID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHUserRoleFieldIndex.RoleID, false); }
			set	{ SetValue((int)CTHUserRoleFieldIndex.RoleID, value); }
		}

		/// <summary>The UserID property of the Entity CTHUserRole<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHUserRole"."UserID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> UserID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHUserRoleFieldIndex.UserID, false); }
			set	{ SetValue((int)CTHUserRoleFieldIndex.UserID, value); }
		}

		/// <summary>Gets / sets related entity of type 'CTHRoleEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHRoleEntity CTHRoleItem
		{
			get { return _cTHRoleItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHRoleItem"); }
		}

		/// <summary>Gets / sets related entity of type 'CTHUserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHUserEntity CTHUserItem
		{
			get { return _cTHUserItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHUserItem"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace SStorm.CTH.DAL
{
	public enum CTHUserRoleFieldIndex
	{
		///<summary>ID. </summary>
		ID,
		///<summary>RoleID. </summary>
		RoleID,
		///<summary>UserID. </summary>
		UserID,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SStorm.CTH.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CTHUserRole. </summary>
	public partial class CTHUserRoleRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between CTHUserRoleEntity and CTHRoleEntity over the m:1 relation they have, using the relation between the fields: CTHUserRole.RoleID - CTHRole.ID</summary>
		public virtual IEntityRelation CTHRoleEntityUsingRoleID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHRoleItem", false, new[] { CTHRoleFields.ID, CTHUserRoleFields.RoleID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHUserRoleEntity and CTHUserEntity over the m:1 relation they have, using the relation between the fields: CTHUserRole.UserID - CTHUser.ID</summary>
		public virtual IEntityRelation CTHUserEntityUsingUserID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHUserItem", false, new[] { CTHUserFields.ID, CTHUserRoleFields.UserID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCTHUserRoleRelations
	{
		internal static readonly IEntityRelation CTHRoleEntityUsingRoleIDStatic = new CTHUserRoleRelations().CTHRoleEntityUsingRoleID;
		internal static readonly IEntityRelation CTHUserEntityUsingUserIDStatic = new CTHUserRoleRelations().CTHUserEntityUsingUserID;

		/// <summary>CTor</summary>
		static StaticCTHUserRoleRelations() { }
	}
}
