//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.6.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SStorm.CTH.DAL.HelperClasses;
using SStorm.CTH.DAL.FactoryClasses;
using SStorm.CTH.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SStorm.CTH.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'CTHUser'.<br/><br/></summary>
	[Serializable]
	public partial class CTHUserEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<CTHDoctorEntity> _cTHDoctorCollection;
		private EntityCollection<CTHPatientEntity> _cTHPatientCollection;
		private EntityCollection<CTHUserRoleEntity> _cTHUserRoleCollection;
		private EntityCollection<CTHDoctorEntity> _cTHDoctorCollectionViaCTHPatient;
		private EntityCollection<CTHPaymentTypeEntity> _cTHPaymentTypeCollectionViaCTHPatient;
		private EntityCollection<CTHRoleEntity> _cTHRoleCollectionViaCTHUserRole;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CTHUserEntityStaticMetaData _staticMetaData = new CTHUserEntityStaticMetaData();
		private static CTHUserRelations _relationsFactory = new CTHUserRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CTHDoctorCollection</summary>
			public static readonly string CTHDoctorCollection = "CTHDoctorCollection";
			/// <summary>Member name CTHPatientCollection</summary>
			public static readonly string CTHPatientCollection = "CTHPatientCollection";
			/// <summary>Member name CTHUserRoleCollection</summary>
			public static readonly string CTHUserRoleCollection = "CTHUserRoleCollection";
			/// <summary>Member name CTHDoctorCollectionViaCTHPatient</summary>
			public static readonly string CTHDoctorCollectionViaCTHPatient = "CTHDoctorCollectionViaCTHPatient";
			/// <summary>Member name CTHPaymentTypeCollectionViaCTHPatient</summary>
			public static readonly string CTHPaymentTypeCollectionViaCTHPatient = "CTHPaymentTypeCollectionViaCTHPatient";
			/// <summary>Member name CTHRoleCollectionViaCTHUserRole</summary>
			public static readonly string CTHRoleCollectionViaCTHUserRole = "CTHRoleCollectionViaCTHUserRole";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CTHUserEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CTHUserEntityStaticMetaData()
			{
				SetEntityCoreInfo("CTHUserEntity", InheritanceHierarchyType.None, false, (int)SStorm.CTH.DAL.EntityType.CTHUserEntity, typeof(CTHUserEntity), typeof(CTHUserEntityFactory), false);
				AddNavigatorMetaData<CTHUserEntity, EntityCollection<CTHDoctorEntity>>("CTHDoctorCollection", a => a._cTHDoctorCollection, (a, b) => a._cTHDoctorCollection = b, a => a.CTHDoctorCollection, () => new CTHUserRelations().CTHDoctorEntityUsingUserID, typeof(CTHDoctorEntity), (int)SStorm.CTH.DAL.EntityType.CTHDoctorEntity);
				AddNavigatorMetaData<CTHUserEntity, EntityCollection<CTHPatientEntity>>("CTHPatientCollection", a => a._cTHPatientCollection, (a, b) => a._cTHPatientCollection = b, a => a.CTHPatientCollection, () => new CTHUserRelations().CTHPatientEntityUsingUserID, typeof(CTHPatientEntity), (int)SStorm.CTH.DAL.EntityType.CTHPatientEntity);
				AddNavigatorMetaData<CTHUserEntity, EntityCollection<CTHUserRoleEntity>>("CTHUserRoleCollection", a => a._cTHUserRoleCollection, (a, b) => a._cTHUserRoleCollection = b, a => a.CTHUserRoleCollection, () => new CTHUserRelations().CTHUserRoleEntityUsingUserID, typeof(CTHUserRoleEntity), (int)SStorm.CTH.DAL.EntityType.CTHUserRoleEntity);
				AddNavigatorMetaData<CTHUserEntity, EntityCollection<CTHDoctorEntity>>("CTHDoctorCollectionViaCTHPatient", a => a._cTHDoctorCollectionViaCTHPatient, (a, b) => a._cTHDoctorCollectionViaCTHPatient = b, a => a.CTHDoctorCollectionViaCTHPatient, () => new CTHUserRelations().CTHPatientEntityUsingUserID, () => new CTHPatientRelations().CTHDoctorEntityUsingDoctorID, "CTHUserEntity__", "CTHPatient_", typeof(CTHDoctorEntity), (int)SStorm.CTH.DAL.EntityType.CTHDoctorEntity);
				AddNavigatorMetaData<CTHUserEntity, EntityCollection<CTHPaymentTypeEntity>>("CTHPaymentTypeCollectionViaCTHPatient", a => a._cTHPaymentTypeCollectionViaCTHPatient, (a, b) => a._cTHPaymentTypeCollectionViaCTHPatient = b, a => a.CTHPaymentTypeCollectionViaCTHPatient, () => new CTHUserRelations().CTHPatientEntityUsingUserID, () => new CTHPatientRelations().CTHPaymentTypeEntityUsingPaymentTypeId, "CTHUserEntity__", "CTHPatient_", typeof(CTHPaymentTypeEntity), (int)SStorm.CTH.DAL.EntityType.CTHPaymentTypeEntity);
				AddNavigatorMetaData<CTHUserEntity, EntityCollection<CTHRoleEntity>>("CTHRoleCollectionViaCTHUserRole", a => a._cTHRoleCollectionViaCTHUserRole, (a, b) => a._cTHRoleCollectionViaCTHUserRole = b, a => a.CTHRoleCollectionViaCTHUserRole, () => new CTHUserRelations().CTHUserRoleEntityUsingUserID, () => new CTHUserRoleRelations().CTHRoleEntityUsingRoleID, "CTHUserEntity__", "CTHUserRole_", typeof(CTHRoleEntity), (int)SStorm.CTH.DAL.EntityType.CTHRoleEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CTHUserEntity()
		{
		}

		/// <summary> CTor</summary>
		public CTHUserEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CTHUserEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CTHUserEntity</param>
		public CTHUserEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHUser which data should be fetched into this CTHUser object</param>
		public CTHUserEntity(System.Int32 iD) : this(iD, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHUser which data should be fetched into this CTHUser object</param>
		/// <param name="validator">The custom validator object for this CTHUserEntity</param>
		public CTHUserEntity(System.Int32 iD, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ID = iD;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CTHUserEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHDoctor' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHDoctorCollection() { return CreateRelationInfoForNavigator("CTHDoctorCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHPatient' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientCollection() { return CreateRelationInfoForNavigator("CTHPatientCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHUserRole' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHUserRoleCollection() { return CreateRelationInfoForNavigator("CTHUserRoleCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHDoctor' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHDoctorCollectionViaCTHPatient() { return CreateRelationInfoForNavigator("CTHDoctorCollectionViaCTHPatient"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHPaymentType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPaymentTypeCollectionViaCTHPatient() { return CreateRelationInfoForNavigator("CTHPaymentTypeCollectionViaCTHPatient"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHRole' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHRoleCollectionViaCTHUserRole() { return CreateRelationInfoForNavigator("CTHRoleCollectionViaCTHUserRole"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CTHUserEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CTHUserRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHDoctor' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHDoctorCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHDoctorCollection", CommonEntityBase.CreateEntityCollection<CTHDoctorEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatient' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientCollection", CommonEntityBase.CreateEntityCollection<CTHPatientEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHUserRole' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHUserRoleCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHUserRoleCollection", CommonEntityBase.CreateEntityCollection<CTHUserRoleEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHDoctor' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHDoctorCollectionViaCTHPatient { get { return _staticMetaData.GetPrefetchPathElement("CTHDoctorCollectionViaCTHPatient", CommonEntityBase.CreateEntityCollection<CTHDoctorEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPaymentType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPaymentTypeCollectionViaCTHPatient { get { return _staticMetaData.GetPrefetchPathElement("CTHPaymentTypeCollectionViaCTHPatient", CommonEntityBase.CreateEntityCollection<CTHPaymentTypeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHRole' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHRoleCollectionViaCTHUserRole { get { return _staticMetaData.GetPrefetchPathElement("CTHRoleCollectionViaCTHUserRole", CommonEntityBase.CreateEntityCollection<CTHRoleEntity>()); } }

		/// <summary>The Email property of the Entity CTHUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHUser"."Email".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Email
		{
			get { return (System.String)GetValue((int)CTHUserFieldIndex.Email, true); }
			set	{ SetValue((int)CTHUserFieldIndex.Email, value); }
		}

		/// <summary>The ID property of the Entity CTHUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHUser"."ID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ID
		{
			get { return (System.Int32)GetValue((int)CTHUserFieldIndex.ID, true); }
			set { SetValue((int)CTHUserFieldIndex.ID, value); }		}

		/// <summary>The Password property of the Entity CTHUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHUser"."Password".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Password
		{
			get { return (System.String)GetValue((int)CTHUserFieldIndex.Password, true); }
			set	{ SetValue((int)CTHUserFieldIndex.Password, value); }
		}

		/// <summary>The UserName property of the Entity CTHUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHUser"."UserName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String UserName
		{
			get { return (System.String)GetValue((int)CTHUserFieldIndex.UserName, true); }
			set	{ SetValue((int)CTHUserFieldIndex.UserName, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHDoctorEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHDoctorEntity))]
		public virtual EntityCollection<CTHDoctorEntity> CTHDoctorCollection { get { return GetOrCreateEntityCollection<CTHDoctorEntity, CTHDoctorEntityFactory>("CTHUserItem", true, false, ref _cTHDoctorCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHPatientEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHPatientEntity))]
		public virtual EntityCollection<CTHPatientEntity> CTHPatientCollection { get { return GetOrCreateEntityCollection<CTHPatientEntity, CTHPatientEntityFactory>("CTHUserItem", true, false, ref _cTHPatientCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHUserRoleEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHUserRoleEntity))]
		public virtual EntityCollection<CTHUserRoleEntity> CTHUserRoleCollection { get { return GetOrCreateEntityCollection<CTHUserRoleEntity, CTHUserRoleEntityFactory>("CTHUserItem", true, false, ref _cTHUserRoleCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHDoctorEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHDoctorEntity))]
		public virtual EntityCollection<CTHDoctorEntity> CTHDoctorCollectionViaCTHPatient { get { return GetOrCreateEntityCollection<CTHDoctorEntity, CTHDoctorEntityFactory>("CTHUserCollectionViaCTHPatient", false, true, ref _cTHDoctorCollectionViaCTHPatient); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHPaymentTypeEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHPaymentTypeEntity))]
		public virtual EntityCollection<CTHPaymentTypeEntity> CTHPaymentTypeCollectionViaCTHPatient { get { return GetOrCreateEntityCollection<CTHPaymentTypeEntity, CTHPaymentTypeEntityFactory>("CTHUserCollectionViaCTHPatient", false, true, ref _cTHPaymentTypeCollectionViaCTHPatient); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHRoleEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHRoleEntity))]
		public virtual EntityCollection<CTHRoleEntity> CTHRoleCollectionViaCTHUserRole { get { return GetOrCreateEntityCollection<CTHRoleEntity, CTHRoleEntityFactory>("CTHUserCollectionViaCTHUserRole", false, true, ref _cTHRoleCollectionViaCTHUserRole); } }
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace SStorm.CTH.DAL
{
	public enum CTHUserFieldIndex
	{
		///<summary>Email. </summary>
		Email,
		///<summary>ID. </summary>
		ID,
		///<summary>Password. </summary>
		Password,
		///<summary>UserName. </summary>
		UserName,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SStorm.CTH.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CTHUser. </summary>
	public partial class CTHUserRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between CTHUserEntity and CTHDoctorEntity over the 1:n relation they have, using the relation between the fields: CTHUser.ID - CTHDoctor.UserID</summary>
		public virtual IEntityRelation CTHDoctorEntityUsingUserID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHDoctorCollection", true, new[] { CTHUserFields.ID, CTHDoctorFields.UserID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHUserEntity and CTHPatientEntity over the 1:n relation they have, using the relation between the fields: CTHUser.ID - CTHPatient.UserID</summary>
		public virtual IEntityRelation CTHPatientEntityUsingUserID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHPatientCollection", true, new[] { CTHUserFields.ID, CTHPatientFields.UserID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHUserEntity and CTHUserRoleEntity over the 1:n relation they have, using the relation between the fields: CTHUser.ID - CTHUserRole.UserID</summary>
		public virtual IEntityRelation CTHUserRoleEntityUsingUserID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHUserRoleCollection", true, new[] { CTHUserFields.ID, CTHUserRoleFields.UserID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCTHUserRelations
	{
		internal static readonly IEntityRelation CTHDoctorEntityUsingUserIDStatic = new CTHUserRelations().CTHDoctorEntityUsingUserID;
		internal static readonly IEntityRelation CTHPatientEntityUsingUserIDStatic = new CTHUserRelations().CTHPatientEntityUsingUserID;
		internal static readonly IEntityRelation CTHUserRoleEntityUsingUserIDStatic = new CTHUserRelations().CTHUserRoleEntityUsingUserID;

		/// <summary>CTor</summary>
		static StaticCTHUserRelations() { }
	}
}
