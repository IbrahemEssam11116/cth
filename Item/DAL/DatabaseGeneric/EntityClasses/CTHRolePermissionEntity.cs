//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.6.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SStorm.CTH.DAL.HelperClasses;
using SStorm.CTH.DAL.FactoryClasses;
using SStorm.CTH.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SStorm.CTH.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'CTHRolePermission'.<br/><br/></summary>
	[Serializable]
	public partial class CTHRolePermissionEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private CTHPermissionEntity _cTHPermissionItem;
		private CTHRoleEntity _cTHRoleItem;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CTHRolePermissionEntityStaticMetaData _staticMetaData = new CTHRolePermissionEntityStaticMetaData();
		private static CTHRolePermissionRelations _relationsFactory = new CTHRolePermissionRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CTHPermissionItem</summary>
			public static readonly string CTHPermissionItem = "CTHPermissionItem";
			/// <summary>Member name CTHRoleItem</summary>
			public static readonly string CTHRoleItem = "CTHRoleItem";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CTHRolePermissionEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CTHRolePermissionEntityStaticMetaData()
			{
				SetEntityCoreInfo("CTHRolePermissionEntity", InheritanceHierarchyType.None, false, (int)SStorm.CTH.DAL.EntityType.CTHRolePermissionEntity, typeof(CTHRolePermissionEntity), typeof(CTHRolePermissionEntityFactory), false);
				AddNavigatorMetaData<CTHRolePermissionEntity, CTHPermissionEntity>("CTHPermissionItem", "CTHRolePermissionCollection", (a, b) => a._cTHPermissionItem = b, a => a._cTHPermissionItem, (a, b) => a.CTHPermissionItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHRolePermissionRelations.CTHPermissionEntityUsingPermissionIDStatic, ()=>new CTHRolePermissionRelations().CTHPermissionEntityUsingPermissionID, null, new int[] { (int)CTHRolePermissionFieldIndex.PermissionID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHPermissionEntity);
				AddNavigatorMetaData<CTHRolePermissionEntity, CTHRoleEntity>("CTHRoleItem", "CTHRolePermissionCollection", (a, b) => a._cTHRoleItem = b, a => a._cTHRoleItem, (a, b) => a.CTHRoleItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHRolePermissionRelations.CTHRoleEntityUsingRoleIDStatic, ()=>new CTHRolePermissionRelations().CTHRoleEntityUsingRoleID, null, new int[] { (int)CTHRolePermissionFieldIndex.RoleID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHRoleEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CTHRolePermissionEntity()
		{
		}

		/// <summary> CTor</summary>
		public CTHRolePermissionEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CTHRolePermissionEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CTHRolePermissionEntity</param>
		public CTHRolePermissionEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHRolePermission which data should be fetched into this CTHRolePermission object</param>
		public CTHRolePermissionEntity(System.Int32 iD) : this(iD, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHRolePermission which data should be fetched into this CTHRolePermission object</param>
		/// <param name="validator">The custom validator object for this CTHRolePermissionEntity</param>
		public CTHRolePermissionEntity(System.Int32 iD, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ID = iD;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CTHRolePermissionEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHPermission' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPermissionItem() { return CreateRelationInfoForNavigator("CTHPermissionItem"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHRole' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHRoleItem() { return CreateRelationInfoForNavigator("CTHRoleItem"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CTHRolePermissionEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CTHRolePermissionRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPermission' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPermissionItem { get { return _staticMetaData.GetPrefetchPathElement("CTHPermissionItem", CommonEntityBase.CreateEntityCollection<CTHPermissionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHRole' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHRoleItem { get { return _staticMetaData.GetPrefetchPathElement("CTHRoleItem", CommonEntityBase.CreateEntityCollection<CTHRoleEntity>()); } }

		/// <summary>The ID property of the Entity CTHRolePermission<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHRolePermission"."ID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ID
		{
			get { return (System.Int32)GetValue((int)CTHRolePermissionFieldIndex.ID, true); }
			set { SetValue((int)CTHRolePermissionFieldIndex.ID, value); }		}

		/// <summary>The PermissionID property of the Entity CTHRolePermission<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHRolePermission"."PermissionID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> PermissionID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHRolePermissionFieldIndex.PermissionID, false); }
			set	{ SetValue((int)CTHRolePermissionFieldIndex.PermissionID, value); }
		}

		/// <summary>The RoleID property of the Entity CTHRolePermission<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHRolePermission"."RoleID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> RoleID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHRolePermissionFieldIndex.RoleID, false); }
			set	{ SetValue((int)CTHRolePermissionFieldIndex.RoleID, value); }
		}

		/// <summary>Gets / sets related entity of type 'CTHPermissionEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHPermissionEntity CTHPermissionItem
		{
			get { return _cTHPermissionItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHPermissionItem"); }
		}

		/// <summary>Gets / sets related entity of type 'CTHRoleEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHRoleEntity CTHRoleItem
		{
			get { return _cTHRoleItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHRoleItem"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace SStorm.CTH.DAL
{
	public enum CTHRolePermissionFieldIndex
	{
		///<summary>ID. </summary>
		ID,
		///<summary>PermissionID. </summary>
		PermissionID,
		///<summary>RoleID. </summary>
		RoleID,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SStorm.CTH.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CTHRolePermission. </summary>
	public partial class CTHRolePermissionRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between CTHRolePermissionEntity and CTHPermissionEntity over the m:1 relation they have, using the relation between the fields: CTHRolePermission.PermissionID - CTHPermission.ID</summary>
		public virtual IEntityRelation CTHPermissionEntityUsingPermissionID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHPermissionItem", false, new[] { CTHPermissionFields.ID, CTHRolePermissionFields.PermissionID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHRolePermissionEntity and CTHRoleEntity over the m:1 relation they have, using the relation between the fields: CTHRolePermission.RoleID - CTHRole.ID</summary>
		public virtual IEntityRelation CTHRoleEntityUsingRoleID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHRoleItem", false, new[] { CTHRoleFields.ID, CTHRolePermissionFields.RoleID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCTHRolePermissionRelations
	{
		internal static readonly IEntityRelation CTHPermissionEntityUsingPermissionIDStatic = new CTHRolePermissionRelations().CTHPermissionEntityUsingPermissionID;
		internal static readonly IEntityRelation CTHRoleEntityUsingRoleIDStatic = new CTHRolePermissionRelations().CTHRoleEntityUsingRoleID;

		/// <summary>CTor</summary>
		static StaticCTHRolePermissionRelations() { }
	}
}
