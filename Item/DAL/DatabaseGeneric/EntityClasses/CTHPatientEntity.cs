//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.6.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SStorm.CTH.DAL.HelperClasses;
using SStorm.CTH.DAL.FactoryClasses;
using SStorm.CTH.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SStorm.CTH.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'CTHPatient'.<br/><br/></summary>
	[Serializable]
	public partial class CTHPatientEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<CTHNotificationEntity> _cTHNotificationCollection;
		private EntityCollection<CTHPatientAssessmentEntity> _cTHPatientAssessmentCollection;
		private EntityCollection<CTHPatientClinicalDataEntity> _cTHPatientClinicalDataCollection;
		private EntityCollection<CTHPatientSymptomEntity> _cTHPatientSymptomCollection;
		private EntityCollection<CTHCancerHistologicEntity> _cTHCancerHistologicCollectionViaCTHPatientClinicalData;
		private EntityCollection<CTHCancerMolecularEntity> _cTHCancerMolecularCollectionViaCTHPatientClinicalData;
		private EntityCollection<CTHCancerSideEntity> _cTHCancerSideCollectionViaCTHPatientClinicalData;
		private EntityCollection<CTHCancerTypeEntity> _cTHCancerTypeCollectionViaCTHPatientClinicalData;
		private EntityCollection<CTHDoctorEntity> _cTHDoctorCollectionViaCTHNotification;
		private EntityCollection<CTHKimoSurveyEntity> _cTHKimoSurveyCollectionViaCTHNotification;
		private EntityCollection<CTHKimoSurveyEntity> _cTHKimoSurveyCollectionViaCTHPatientSymptom;
		private EntityCollection<CTHPatientSymptomEntity> _cTHPatientSymptomCollectionViaCTHNotification;
		private EntityCollection<CTHStagingEntity> _cTHStagingCollectionViaCTHPatientClinicalData;
		private EntityCollection<CTHSymptomEntity> _cTHSymptomCollectionViaCTHPatientSymptom;
		private EntityCollection<CTHTreatmentTypeEntity> _cTHTreatmentTypeCollectionViaCTHPatientAssessment;
		private EntityCollection<CTHTreatmentTypeEntity> _cTHTreatmentTypeCollectionViaCTHPatientAssessment1;
		private EntityCollection<CTHTumorGradeEntity> _cTHTumorGradeCollectionViaCTHPatientClinicalData;
		private CTHDoctorEntity _cTHDoctorItem;
		private CTHPaymentTypeEntity _cTHPaymentTypeItem;
		private CTHUserEntity _cTHUserItem;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CTHPatientEntityStaticMetaData _staticMetaData = new CTHPatientEntityStaticMetaData();
		private static CTHPatientRelations _relationsFactory = new CTHPatientRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CTHDoctorItem</summary>
			public static readonly string CTHDoctorItem = "CTHDoctorItem";
			/// <summary>Member name CTHPaymentTypeItem</summary>
			public static readonly string CTHPaymentTypeItem = "CTHPaymentTypeItem";
			/// <summary>Member name CTHUserItem</summary>
			public static readonly string CTHUserItem = "CTHUserItem";
			/// <summary>Member name CTHNotificationCollection</summary>
			public static readonly string CTHNotificationCollection = "CTHNotificationCollection";
			/// <summary>Member name CTHPatientAssessmentCollection</summary>
			public static readonly string CTHPatientAssessmentCollection = "CTHPatientAssessmentCollection";
			/// <summary>Member name CTHPatientClinicalDataCollection</summary>
			public static readonly string CTHPatientClinicalDataCollection = "CTHPatientClinicalDataCollection";
			/// <summary>Member name CTHPatientSymptomCollection</summary>
			public static readonly string CTHPatientSymptomCollection = "CTHPatientSymptomCollection";
			/// <summary>Member name CTHCancerHistologicCollectionViaCTHPatientClinicalData</summary>
			public static readonly string CTHCancerHistologicCollectionViaCTHPatientClinicalData = "CTHCancerHistologicCollectionViaCTHPatientClinicalData";
			/// <summary>Member name CTHCancerMolecularCollectionViaCTHPatientClinicalData</summary>
			public static readonly string CTHCancerMolecularCollectionViaCTHPatientClinicalData = "CTHCancerMolecularCollectionViaCTHPatientClinicalData";
			/// <summary>Member name CTHCancerSideCollectionViaCTHPatientClinicalData</summary>
			public static readonly string CTHCancerSideCollectionViaCTHPatientClinicalData = "CTHCancerSideCollectionViaCTHPatientClinicalData";
			/// <summary>Member name CTHCancerTypeCollectionViaCTHPatientClinicalData</summary>
			public static readonly string CTHCancerTypeCollectionViaCTHPatientClinicalData = "CTHCancerTypeCollectionViaCTHPatientClinicalData";
			/// <summary>Member name CTHDoctorCollectionViaCTHNotification</summary>
			public static readonly string CTHDoctorCollectionViaCTHNotification = "CTHDoctorCollectionViaCTHNotification";
			/// <summary>Member name CTHKimoSurveyCollectionViaCTHNotification</summary>
			public static readonly string CTHKimoSurveyCollectionViaCTHNotification = "CTHKimoSurveyCollectionViaCTHNotification";
			/// <summary>Member name CTHKimoSurveyCollectionViaCTHPatientSymptom</summary>
			public static readonly string CTHKimoSurveyCollectionViaCTHPatientSymptom = "CTHKimoSurveyCollectionViaCTHPatientSymptom";
			/// <summary>Member name CTHPatientSymptomCollectionViaCTHNotification</summary>
			public static readonly string CTHPatientSymptomCollectionViaCTHNotification = "CTHPatientSymptomCollectionViaCTHNotification";
			/// <summary>Member name CTHStagingCollectionViaCTHPatientClinicalData</summary>
			public static readonly string CTHStagingCollectionViaCTHPatientClinicalData = "CTHStagingCollectionViaCTHPatientClinicalData";
			/// <summary>Member name CTHSymptomCollectionViaCTHPatientSymptom</summary>
			public static readonly string CTHSymptomCollectionViaCTHPatientSymptom = "CTHSymptomCollectionViaCTHPatientSymptom";
			/// <summary>Member name CTHTreatmentTypeCollectionViaCTHPatientAssessment</summary>
			public static readonly string CTHTreatmentTypeCollectionViaCTHPatientAssessment = "CTHTreatmentTypeCollectionViaCTHPatientAssessment";
			/// <summary>Member name CTHTreatmentTypeCollectionViaCTHPatientAssessment1</summary>
			public static readonly string CTHTreatmentTypeCollectionViaCTHPatientAssessment1 = "CTHTreatmentTypeCollectionViaCTHPatientAssessment1";
			/// <summary>Member name CTHTumorGradeCollectionViaCTHPatientClinicalData</summary>
			public static readonly string CTHTumorGradeCollectionViaCTHPatientClinicalData = "CTHTumorGradeCollectionViaCTHPatientClinicalData";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CTHPatientEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CTHPatientEntityStaticMetaData()
			{
				SetEntityCoreInfo("CTHPatientEntity", InheritanceHierarchyType.None, false, (int)SStorm.CTH.DAL.EntityType.CTHPatientEntity, typeof(CTHPatientEntity), typeof(CTHPatientEntityFactory), false);
				AddNavigatorMetaData<CTHPatientEntity, EntityCollection<CTHNotificationEntity>>("CTHNotificationCollection", a => a._cTHNotificationCollection, (a, b) => a._cTHNotificationCollection = b, a => a.CTHNotificationCollection, () => new CTHPatientRelations().CTHNotificationEntityUsingPatientID, typeof(CTHNotificationEntity), (int)SStorm.CTH.DAL.EntityType.CTHNotificationEntity);
				AddNavigatorMetaData<CTHPatientEntity, EntityCollection<CTHPatientAssessmentEntity>>("CTHPatientAssessmentCollection", a => a._cTHPatientAssessmentCollection, (a, b) => a._cTHPatientAssessmentCollection = b, a => a.CTHPatientAssessmentCollection, () => new CTHPatientRelations().CTHPatientAssessmentEntityUsingPatientID, typeof(CTHPatientAssessmentEntity), (int)SStorm.CTH.DAL.EntityType.CTHPatientAssessmentEntity);
				AddNavigatorMetaData<CTHPatientEntity, EntityCollection<CTHPatientClinicalDataEntity>>("CTHPatientClinicalDataCollection", a => a._cTHPatientClinicalDataCollection, (a, b) => a._cTHPatientClinicalDataCollection = b, a => a.CTHPatientClinicalDataCollection, () => new CTHPatientRelations().CTHPatientClinicalDataEntityUsingPatientID, typeof(CTHPatientClinicalDataEntity), (int)SStorm.CTH.DAL.EntityType.CTHPatientClinicalDataEntity);
				AddNavigatorMetaData<CTHPatientEntity, EntityCollection<CTHPatientSymptomEntity>>("CTHPatientSymptomCollection", a => a._cTHPatientSymptomCollection, (a, b) => a._cTHPatientSymptomCollection = b, a => a.CTHPatientSymptomCollection, () => new CTHPatientRelations().CTHPatientSymptomEntityUsingPatientID, typeof(CTHPatientSymptomEntity), (int)SStorm.CTH.DAL.EntityType.CTHPatientSymptomEntity);
				AddNavigatorMetaData<CTHPatientEntity, CTHDoctorEntity>("CTHDoctorItem", "CTHPatientCollection", (a, b) => a._cTHDoctorItem = b, a => a._cTHDoctorItem, (a, b) => a.CTHDoctorItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHPatientRelations.CTHDoctorEntityUsingDoctorIDStatic, ()=>new CTHPatientRelations().CTHDoctorEntityUsingDoctorID, null, new int[] { (int)CTHPatientFieldIndex.DoctorID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHDoctorEntity);
				AddNavigatorMetaData<CTHPatientEntity, CTHPaymentTypeEntity>("CTHPaymentTypeItem", "CTHPatientCollection", (a, b) => a._cTHPaymentTypeItem = b, a => a._cTHPaymentTypeItem, (a, b) => a.CTHPaymentTypeItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHPatientRelations.CTHPaymentTypeEntityUsingPaymentTypeIdStatic, ()=>new CTHPatientRelations().CTHPaymentTypeEntityUsingPaymentTypeId, null, new int[] { (int)CTHPatientFieldIndex.PaymentTypeId }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHPaymentTypeEntity);
				AddNavigatorMetaData<CTHPatientEntity, CTHUserEntity>("CTHUserItem", "CTHPatientCollection", (a, b) => a._cTHUserItem = b, a => a._cTHUserItem, (a, b) => a.CTHUserItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHPatientRelations.CTHUserEntityUsingUserIDStatic, ()=>new CTHPatientRelations().CTHUserEntityUsingUserID, null, new int[] { (int)CTHPatientFieldIndex.UserID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHUserEntity);
				AddNavigatorMetaData<CTHPatientEntity, EntityCollection<CTHCancerHistologicEntity>>("CTHCancerHistologicCollectionViaCTHPatientClinicalData", a => a._cTHCancerHistologicCollectionViaCTHPatientClinicalData, (a, b) => a._cTHCancerHistologicCollectionViaCTHPatientClinicalData = b, a => a.CTHCancerHistologicCollectionViaCTHPatientClinicalData, () => new CTHPatientRelations().CTHPatientClinicalDataEntityUsingPatientID, () => new CTHPatientClinicalDataRelations().CTHCancerHistologicEntityUsingCancerHistologicalID, "CTHPatientEntity__", "CTHPatientClinicalData_", typeof(CTHCancerHistologicEntity), (int)SStorm.CTH.DAL.EntityType.CTHCancerHistologicEntity);
				AddNavigatorMetaData<CTHPatientEntity, EntityCollection<CTHCancerMolecularEntity>>("CTHCancerMolecularCollectionViaCTHPatientClinicalData", a => a._cTHCancerMolecularCollectionViaCTHPatientClinicalData, (a, b) => a._cTHCancerMolecularCollectionViaCTHPatientClinicalData = b, a => a.CTHCancerMolecularCollectionViaCTHPatientClinicalData, () => new CTHPatientRelations().CTHPatientClinicalDataEntityUsingPatientID, () => new CTHPatientClinicalDataRelations().CTHCancerMolecularEntityUsingCancerMolecularID, "CTHPatientEntity__", "CTHPatientClinicalData_", typeof(CTHCancerMolecularEntity), (int)SStorm.CTH.DAL.EntityType.CTHCancerMolecularEntity);
				AddNavigatorMetaData<CTHPatientEntity, EntityCollection<CTHCancerSideEntity>>("CTHCancerSideCollectionViaCTHPatientClinicalData", a => a._cTHCancerSideCollectionViaCTHPatientClinicalData, (a, b) => a._cTHCancerSideCollectionViaCTHPatientClinicalData = b, a => a.CTHCancerSideCollectionViaCTHPatientClinicalData, () => new CTHPatientRelations().CTHPatientClinicalDataEntityUsingPatientID, () => new CTHPatientClinicalDataRelations().CTHCancerSideEntityUsingCancerSideId, "CTHPatientEntity__", "CTHPatientClinicalData_", typeof(CTHCancerSideEntity), (int)SStorm.CTH.DAL.EntityType.CTHCancerSideEntity);
				AddNavigatorMetaData<CTHPatientEntity, EntityCollection<CTHCancerTypeEntity>>("CTHCancerTypeCollectionViaCTHPatientClinicalData", a => a._cTHCancerTypeCollectionViaCTHPatientClinicalData, (a, b) => a._cTHCancerTypeCollectionViaCTHPatientClinicalData = b, a => a.CTHCancerTypeCollectionViaCTHPatientClinicalData, () => new CTHPatientRelations().CTHPatientClinicalDataEntityUsingPatientID, () => new CTHPatientClinicalDataRelations().CTHCancerTypeEntityUsingCancerTypeID, "CTHPatientEntity__", "CTHPatientClinicalData_", typeof(CTHCancerTypeEntity), (int)SStorm.CTH.DAL.EntityType.CTHCancerTypeEntity);
				AddNavigatorMetaData<CTHPatientEntity, EntityCollection<CTHDoctorEntity>>("CTHDoctorCollectionViaCTHNotification", a => a._cTHDoctorCollectionViaCTHNotification, (a, b) => a._cTHDoctorCollectionViaCTHNotification = b, a => a.CTHDoctorCollectionViaCTHNotification, () => new CTHPatientRelations().CTHNotificationEntityUsingPatientID, () => new CTHNotificationRelations().CTHDoctorEntityUsingDoctorID, "CTHPatientEntity__", "CTHNotification_", typeof(CTHDoctorEntity), (int)SStorm.CTH.DAL.EntityType.CTHDoctorEntity);
				AddNavigatorMetaData<CTHPatientEntity, EntityCollection<CTHKimoSurveyEntity>>("CTHKimoSurveyCollectionViaCTHNotification", a => a._cTHKimoSurveyCollectionViaCTHNotification, (a, b) => a._cTHKimoSurveyCollectionViaCTHNotification = b, a => a.CTHKimoSurveyCollectionViaCTHNotification, () => new CTHPatientRelations().CTHNotificationEntityUsingPatientID, () => new CTHNotificationRelations().CTHKimoSurveyEntityUsingKimoID, "CTHPatientEntity__", "CTHNotification_", typeof(CTHKimoSurveyEntity), (int)SStorm.CTH.DAL.EntityType.CTHKimoSurveyEntity);
				AddNavigatorMetaData<CTHPatientEntity, EntityCollection<CTHKimoSurveyEntity>>("CTHKimoSurveyCollectionViaCTHPatientSymptom", a => a._cTHKimoSurveyCollectionViaCTHPatientSymptom, (a, b) => a._cTHKimoSurveyCollectionViaCTHPatientSymptom = b, a => a.CTHKimoSurveyCollectionViaCTHPatientSymptom, () => new CTHPatientRelations().CTHPatientSymptomEntityUsingPatientID, () => new CTHPatientSymptomRelations().CTHKimoSurveyEntityUsingChemoID, "CTHPatientEntity__", "CTHPatientSymptom_", typeof(CTHKimoSurveyEntity), (int)SStorm.CTH.DAL.EntityType.CTHKimoSurveyEntity);
				AddNavigatorMetaData<CTHPatientEntity, EntityCollection<CTHPatientSymptomEntity>>("CTHPatientSymptomCollectionViaCTHNotification", a => a._cTHPatientSymptomCollectionViaCTHNotification, (a, b) => a._cTHPatientSymptomCollectionViaCTHNotification = b, a => a.CTHPatientSymptomCollectionViaCTHNotification, () => new CTHPatientRelations().CTHNotificationEntityUsingPatientID, () => new CTHNotificationRelations().CTHPatientSymptomEntityUsingPatientSymptomID, "CTHPatientEntity__", "CTHNotification_", typeof(CTHPatientSymptomEntity), (int)SStorm.CTH.DAL.EntityType.CTHPatientSymptomEntity);
				AddNavigatorMetaData<CTHPatientEntity, EntityCollection<CTHStagingEntity>>("CTHStagingCollectionViaCTHPatientClinicalData", a => a._cTHStagingCollectionViaCTHPatientClinicalData, (a, b) => a._cTHStagingCollectionViaCTHPatientClinicalData = b, a => a.CTHStagingCollectionViaCTHPatientClinicalData, () => new CTHPatientRelations().CTHPatientClinicalDataEntityUsingPatientID, () => new CTHPatientClinicalDataRelations().CTHStagingEntityUsingStageGradeID, "CTHPatientEntity__", "CTHPatientClinicalData_", typeof(CTHStagingEntity), (int)SStorm.CTH.DAL.EntityType.CTHStagingEntity);
				AddNavigatorMetaData<CTHPatientEntity, EntityCollection<CTHSymptomEntity>>("CTHSymptomCollectionViaCTHPatientSymptom", a => a._cTHSymptomCollectionViaCTHPatientSymptom, (a, b) => a._cTHSymptomCollectionViaCTHPatientSymptom = b, a => a.CTHSymptomCollectionViaCTHPatientSymptom, () => new CTHPatientRelations().CTHPatientSymptomEntityUsingPatientID, () => new CTHPatientSymptomRelations().CTHSymptomEntityUsingSymptomID, "CTHPatientEntity__", "CTHPatientSymptom_", typeof(CTHSymptomEntity), (int)SStorm.CTH.DAL.EntityType.CTHSymptomEntity);
				AddNavigatorMetaData<CTHPatientEntity, EntityCollection<CTHTreatmentTypeEntity>>("CTHTreatmentTypeCollectionViaCTHPatientAssessment", a => a._cTHTreatmentTypeCollectionViaCTHPatientAssessment, (a, b) => a._cTHTreatmentTypeCollectionViaCTHPatientAssessment = b, a => a.CTHTreatmentTypeCollectionViaCTHPatientAssessment, () => new CTHPatientRelations().CTHPatientAssessmentEntityUsingPatientID, () => new CTHPatientAssessmentRelations().CTHTreatmentTypeEntityUsingTreatmentPlanID, "CTHPatientEntity__", "CTHPatientAssessment_", typeof(CTHTreatmentTypeEntity), (int)SStorm.CTH.DAL.EntityType.CTHTreatmentTypeEntity);
				AddNavigatorMetaData<CTHPatientEntity, EntityCollection<CTHTreatmentTypeEntity>>("CTHTreatmentTypeCollectionViaCTHPatientAssessment1", a => a._cTHTreatmentTypeCollectionViaCTHPatientAssessment1, (a, b) => a._cTHTreatmentTypeCollectionViaCTHPatientAssessment1 = b, a => a.CTHTreatmentTypeCollectionViaCTHPatientAssessment1, () => new CTHPatientRelations().CTHPatientAssessmentEntityUsingPatientID, () => new CTHPatientAssessmentRelations().CTHTreatmentTypeEntityUsingTreatmentResponseID, "CTHPatientEntity__", "CTHPatientAssessment_", typeof(CTHTreatmentTypeEntity), (int)SStorm.CTH.DAL.EntityType.CTHTreatmentTypeEntity);
				AddNavigatorMetaData<CTHPatientEntity, EntityCollection<CTHTumorGradeEntity>>("CTHTumorGradeCollectionViaCTHPatientClinicalData", a => a._cTHTumorGradeCollectionViaCTHPatientClinicalData, (a, b) => a._cTHTumorGradeCollectionViaCTHPatientClinicalData = b, a => a.CTHTumorGradeCollectionViaCTHPatientClinicalData, () => new CTHPatientRelations().CTHPatientClinicalDataEntityUsingPatientID, () => new CTHPatientClinicalDataRelations().CTHTumorGradeEntityUsingTumorGradeID, "CTHPatientEntity__", "CTHPatientClinicalData_", typeof(CTHTumorGradeEntity), (int)SStorm.CTH.DAL.EntityType.CTHTumorGradeEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CTHPatientEntity()
		{
		}

		/// <summary> CTor</summary>
		public CTHPatientEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CTHPatientEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CTHPatientEntity</param>
		public CTHPatientEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHPatient which data should be fetched into this CTHPatient object</param>
		public CTHPatientEntity(System.Int32 iD) : this(iD, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHPatient which data should be fetched into this CTHPatient object</param>
		/// <param name="validator">The custom validator object for this CTHPatientEntity</param>
		public CTHPatientEntity(System.Int32 iD, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ID = iD;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CTHPatientEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHNotification' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHNotificationCollection() { return CreateRelationInfoForNavigator("CTHNotificationCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHPatientAssessment' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientAssessmentCollection() { return CreateRelationInfoForNavigator("CTHPatientAssessmentCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHPatientClinicalData' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientClinicalDataCollection() { return CreateRelationInfoForNavigator("CTHPatientClinicalDataCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHPatientSymptom' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientSymptomCollection() { return CreateRelationInfoForNavigator("CTHPatientSymptomCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHCancerHistologic' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHCancerHistologicCollectionViaCTHPatientClinicalData() { return CreateRelationInfoForNavigator("CTHCancerHistologicCollectionViaCTHPatientClinicalData"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHCancerMolecular' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHCancerMolecularCollectionViaCTHPatientClinicalData() { return CreateRelationInfoForNavigator("CTHCancerMolecularCollectionViaCTHPatientClinicalData"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHCancerSide' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHCancerSideCollectionViaCTHPatientClinicalData() { return CreateRelationInfoForNavigator("CTHCancerSideCollectionViaCTHPatientClinicalData"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHCancerType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHCancerTypeCollectionViaCTHPatientClinicalData() { return CreateRelationInfoForNavigator("CTHCancerTypeCollectionViaCTHPatientClinicalData"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHDoctor' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHDoctorCollectionViaCTHNotification() { return CreateRelationInfoForNavigator("CTHDoctorCollectionViaCTHNotification"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHKimoSurvey' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHKimoSurveyCollectionViaCTHNotification() { return CreateRelationInfoForNavigator("CTHKimoSurveyCollectionViaCTHNotification"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHKimoSurvey' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHKimoSurveyCollectionViaCTHPatientSymptom() { return CreateRelationInfoForNavigator("CTHKimoSurveyCollectionViaCTHPatientSymptom"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHPatientSymptom' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientSymptomCollectionViaCTHNotification() { return CreateRelationInfoForNavigator("CTHPatientSymptomCollectionViaCTHNotification"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHStaging' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHStagingCollectionViaCTHPatientClinicalData() { return CreateRelationInfoForNavigator("CTHStagingCollectionViaCTHPatientClinicalData"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHSymptom' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHSymptomCollectionViaCTHPatientSymptom() { return CreateRelationInfoForNavigator("CTHSymptomCollectionViaCTHPatientSymptom"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHTreatmentType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHTreatmentTypeCollectionViaCTHPatientAssessment() { return CreateRelationInfoForNavigator("CTHTreatmentTypeCollectionViaCTHPatientAssessment"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHTreatmentType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHTreatmentTypeCollectionViaCTHPatientAssessment1() { return CreateRelationInfoForNavigator("CTHTreatmentTypeCollectionViaCTHPatientAssessment1"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHTumorGrade' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHTumorGradeCollectionViaCTHPatientClinicalData() { return CreateRelationInfoForNavigator("CTHTumorGradeCollectionViaCTHPatientClinicalData"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHDoctor' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHDoctorItem() { return CreateRelationInfoForNavigator("CTHDoctorItem"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHPaymentType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPaymentTypeItem() { return CreateRelationInfoForNavigator("CTHPaymentTypeItem"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHUser' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHUserItem() { return CreateRelationInfoForNavigator("CTHUserItem"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CTHPatientEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CTHPatientRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHNotification' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHNotificationCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHNotificationCollection", CommonEntityBase.CreateEntityCollection<CTHNotificationEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatientAssessment' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientAssessmentCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientAssessmentCollection", CommonEntityBase.CreateEntityCollection<CTHPatientAssessmentEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatientClinicalData' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientClinicalDataCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientClinicalDataCollection", CommonEntityBase.CreateEntityCollection<CTHPatientClinicalDataEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatientSymptom' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientSymptomCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientSymptomCollection", CommonEntityBase.CreateEntityCollection<CTHPatientSymptomEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHCancerHistologic' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHCancerHistologicCollectionViaCTHPatientClinicalData { get { return _staticMetaData.GetPrefetchPathElement("CTHCancerHistologicCollectionViaCTHPatientClinicalData", CommonEntityBase.CreateEntityCollection<CTHCancerHistologicEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHCancerMolecular' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHCancerMolecularCollectionViaCTHPatientClinicalData { get { return _staticMetaData.GetPrefetchPathElement("CTHCancerMolecularCollectionViaCTHPatientClinicalData", CommonEntityBase.CreateEntityCollection<CTHCancerMolecularEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHCancerSide' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHCancerSideCollectionViaCTHPatientClinicalData { get { return _staticMetaData.GetPrefetchPathElement("CTHCancerSideCollectionViaCTHPatientClinicalData", CommonEntityBase.CreateEntityCollection<CTHCancerSideEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHCancerType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHCancerTypeCollectionViaCTHPatientClinicalData { get { return _staticMetaData.GetPrefetchPathElement("CTHCancerTypeCollectionViaCTHPatientClinicalData", CommonEntityBase.CreateEntityCollection<CTHCancerTypeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHDoctor' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHDoctorCollectionViaCTHNotification { get { return _staticMetaData.GetPrefetchPathElement("CTHDoctorCollectionViaCTHNotification", CommonEntityBase.CreateEntityCollection<CTHDoctorEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHKimoSurvey' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHKimoSurveyCollectionViaCTHNotification { get { return _staticMetaData.GetPrefetchPathElement("CTHKimoSurveyCollectionViaCTHNotification", CommonEntityBase.CreateEntityCollection<CTHKimoSurveyEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHKimoSurvey' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHKimoSurveyCollectionViaCTHPatientSymptom { get { return _staticMetaData.GetPrefetchPathElement("CTHKimoSurveyCollectionViaCTHPatientSymptom", CommonEntityBase.CreateEntityCollection<CTHKimoSurveyEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatientSymptom' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientSymptomCollectionViaCTHNotification { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientSymptomCollectionViaCTHNotification", CommonEntityBase.CreateEntityCollection<CTHPatientSymptomEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHStaging' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHStagingCollectionViaCTHPatientClinicalData { get { return _staticMetaData.GetPrefetchPathElement("CTHStagingCollectionViaCTHPatientClinicalData", CommonEntityBase.CreateEntityCollection<CTHStagingEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHSymptom' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHSymptomCollectionViaCTHPatientSymptom { get { return _staticMetaData.GetPrefetchPathElement("CTHSymptomCollectionViaCTHPatientSymptom", CommonEntityBase.CreateEntityCollection<CTHSymptomEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHTreatmentType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHTreatmentTypeCollectionViaCTHPatientAssessment { get { return _staticMetaData.GetPrefetchPathElement("CTHTreatmentTypeCollectionViaCTHPatientAssessment", CommonEntityBase.CreateEntityCollection<CTHTreatmentTypeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHTreatmentType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHTreatmentTypeCollectionViaCTHPatientAssessment1 { get { return _staticMetaData.GetPrefetchPathElement("CTHTreatmentTypeCollectionViaCTHPatientAssessment1", CommonEntityBase.CreateEntityCollection<CTHTreatmentTypeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHTumorGrade' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHTumorGradeCollectionViaCTHPatientClinicalData { get { return _staticMetaData.GetPrefetchPathElement("CTHTumorGradeCollectionViaCTHPatientClinicalData", CommonEntityBase.CreateEntityCollection<CTHTumorGradeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHDoctor' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHDoctorItem { get { return _staticMetaData.GetPrefetchPathElement("CTHDoctorItem", CommonEntityBase.CreateEntityCollection<CTHDoctorEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPaymentType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPaymentTypeItem { get { return _staticMetaData.GetPrefetchPathElement("CTHPaymentTypeItem", CommonEntityBase.CreateEntityCollection<CTHPaymentTypeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHUser' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHUserItem { get { return _staticMetaData.GetPrefetchPathElement("CTHUserItem", CommonEntityBase.CreateEntityCollection<CTHUserEntity>()); } }

		/// <summary>The ArCareProviderContactNumber property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."ArCareProviderContactNumber".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArCareProviderContactNumber
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.ArCareProviderContactNumber, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.ArCareProviderContactNumber, value); }
		}

		/// <summary>The ArCareProviderName property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."ArCareProviderName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArCareProviderName
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.ArCareProviderName, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.ArCareProviderName, value); }
		}

		/// <summary>The ArCareProviderTitle property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."ArCareProviderTitle".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArCareProviderTitle
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.ArCareProviderTitle, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.ArCareProviderTitle, value); }
		}

		/// <summary>The ArContactNumber property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."ArContactNumber".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArContactNumber
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.ArContactNumber, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.ArContactNumber, value); }
		}

		/// <summary>The ArNationalID property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."ArNationalID".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArNationalID
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.ArNationalID, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.ArNationalID, value); }
		}

		/// <summary>The ArOccupation property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."ArOccupation".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArOccupation
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.ArOccupation, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.ArOccupation, value); }
		}

		/// <summary>The ArPatientGender property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."ArPatientGender".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArPatientGender
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.ArPatientGender, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.ArPatientGender, value); }
		}

		/// <summary>The ArResidence property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."ArResidence".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArResidence
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.ArResidence, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.ArResidence, value); }
		}

		/// <summary>The ArSponserCompanyName property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."ArSponserCompanyName".<br/>Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 10.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArSponserCompanyName
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.ArSponserCompanyName, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.ArSponserCompanyName, value); }
		}

		/// <summary>The BirthDate property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."BirthDate".<br/>Table field type characteristics (type, precision, scale, length): Date, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> BirthDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)CTHPatientFieldIndex.BirthDate, false); }
			set	{ SetValue((int)CTHPatientFieldIndex.BirthDate, value); }
		}

		/// <summary>The CareProviderContactNumber property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."CareProviderContactNumber".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String CareProviderContactNumber
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.CareProviderContactNumber, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.CareProviderContactNumber, value); }
		}

		/// <summary>The CareProviderName property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."CareProviderName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String CareProviderName
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.CareProviderName, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.CareProviderName, value); }
		}

		/// <summary>The CareProviderTitle property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."CareProviderTitle".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String CareProviderTitle
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.CareProviderTitle, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.CareProviderTitle, value); }
		}

		/// <summary>The ContactNumber property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."ContactNumber".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ContactNumber
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.ContactNumber, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.ContactNumber, value); }
		}

		/// <summary>The DoctorID property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."DoctorID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> DoctorID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHPatientFieldIndex.DoctorID, false); }
			set	{ SetValue((int)CTHPatientFieldIndex.DoctorID, value); }
		}

		/// <summary>The FirstVisitDate property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."FirstVisitDate".<br/>Table field type characteristics (type, precision, scale, length): Date, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> FirstVisitDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)CTHPatientFieldIndex.FirstVisitDate, false); }
			set	{ SetValue((int)CTHPatientFieldIndex.FirstVisitDate, value); }
		}

		/// <summary>The ID property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."ID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ID
		{
			get { return (System.Int32)GetValue((int)CTHPatientFieldIndex.ID, true); }
			set { SetValue((int)CTHPatientFieldIndex.ID, value); }		}

		/// <summary>The NationalID property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."NationalID".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String NationalID
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.NationalID, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.NationalID, value); }
		}

		/// <summary>The NationalIDPhotoPath property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."NationalIDPhotoPath".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String NationalIDPhotoPath
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.NationalIDPhotoPath, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.NationalIDPhotoPath, value); }
		}

		/// <summary>The Occupation property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."Occupation".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Occupation
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.Occupation, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.Occupation, value); }
		}

		/// <summary>The PatientAge property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."PatientAge".<br/>Table field type characteristics (type, precision, scale, length): Float, 38, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Double> PatientAge
		{
			get { return (Nullable<System.Double>)GetValue((int)CTHPatientFieldIndex.PatientAge, false); }
			set	{ SetValue((int)CTHPatientFieldIndex.PatientAge, value); }
		}

		/// <summary>The PatientGender property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."PatientGender".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PatientGender
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.PatientGender, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.PatientGender, value); }
		}

		/// <summary>The PatientNameA property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."PatientNameA".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PatientNameA
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.PatientNameA, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.PatientNameA, value); }
		}

		/// <summary>The PatientNameE property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."PatientNameE".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PatientNameE
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.PatientNameE, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.PatientNameE, value); }
		}

		/// <summary>The PatientNumber property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."PatientNumber".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> PatientNumber
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHPatientFieldIndex.PatientNumber, false); }
			set	{ SetValue((int)CTHPatientFieldIndex.PatientNumber, value); }
		}

		/// <summary>The PaymentTypeId property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."PaymentTypeId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> PaymentTypeId
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHPatientFieldIndex.PaymentTypeId, false); }
			set	{ SetValue((int)CTHPatientFieldIndex.PaymentTypeId, value); }
		}

		/// <summary>The Residence property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."Residence".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Residence
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.Residence, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.Residence, value); }
		}

		/// <summary>The SponserCompanyName property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."SponserCompanyName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String SponserCompanyName
		{
			get { return (System.String)GetValue((int)CTHPatientFieldIndex.SponserCompanyName, true); }
			set	{ SetValue((int)CTHPatientFieldIndex.SponserCompanyName, value); }
		}

		/// <summary>The UserID property of the Entity CTHPatient<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatient"."UserID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> UserID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHPatientFieldIndex.UserID, false); }
			set	{ SetValue((int)CTHPatientFieldIndex.UserID, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHNotificationEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHNotificationEntity))]
		public virtual EntityCollection<CTHNotificationEntity> CTHNotificationCollection { get { return GetOrCreateEntityCollection<CTHNotificationEntity, CTHNotificationEntityFactory>("CTHPatientItem", true, false, ref _cTHNotificationCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHPatientAssessmentEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHPatientAssessmentEntity))]
		public virtual EntityCollection<CTHPatientAssessmentEntity> CTHPatientAssessmentCollection { get { return GetOrCreateEntityCollection<CTHPatientAssessmentEntity, CTHPatientAssessmentEntityFactory>("CTHPatientItem", true, false, ref _cTHPatientAssessmentCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHPatientClinicalDataEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHPatientClinicalDataEntity))]
		public virtual EntityCollection<CTHPatientClinicalDataEntity> CTHPatientClinicalDataCollection { get { return GetOrCreateEntityCollection<CTHPatientClinicalDataEntity, CTHPatientClinicalDataEntityFactory>("CTHPatientItem", true, false, ref _cTHPatientClinicalDataCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHPatientSymptomEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHPatientSymptomEntity))]
		public virtual EntityCollection<CTHPatientSymptomEntity> CTHPatientSymptomCollection { get { return GetOrCreateEntityCollection<CTHPatientSymptomEntity, CTHPatientSymptomEntityFactory>("CTHPatientItem", true, false, ref _cTHPatientSymptomCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHCancerHistologicEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHCancerHistologicEntity))]
		public virtual EntityCollection<CTHCancerHistologicEntity> CTHCancerHistologicCollectionViaCTHPatientClinicalData { get { return GetOrCreateEntityCollection<CTHCancerHistologicEntity, CTHCancerHistologicEntityFactory>("CTHPatientCollectionViaCTHPatientClinicalData", false, true, ref _cTHCancerHistologicCollectionViaCTHPatientClinicalData); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHCancerMolecularEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHCancerMolecularEntity))]
		public virtual EntityCollection<CTHCancerMolecularEntity> CTHCancerMolecularCollectionViaCTHPatientClinicalData { get { return GetOrCreateEntityCollection<CTHCancerMolecularEntity, CTHCancerMolecularEntityFactory>("CTHPatientCollectionViaCTHPatientClinicalData", false, true, ref _cTHCancerMolecularCollectionViaCTHPatientClinicalData); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHCancerSideEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHCancerSideEntity))]
		public virtual EntityCollection<CTHCancerSideEntity> CTHCancerSideCollectionViaCTHPatientClinicalData { get { return GetOrCreateEntityCollection<CTHCancerSideEntity, CTHCancerSideEntityFactory>("CTHPatientCollectionViaCTHPatientClinicalData", false, true, ref _cTHCancerSideCollectionViaCTHPatientClinicalData); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHCancerTypeEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHCancerTypeEntity))]
		public virtual EntityCollection<CTHCancerTypeEntity> CTHCancerTypeCollectionViaCTHPatientClinicalData { get { return GetOrCreateEntityCollection<CTHCancerTypeEntity, CTHCancerTypeEntityFactory>("CTHPatientCollectionViaCTHPatientClinicalData", false, true, ref _cTHCancerTypeCollectionViaCTHPatientClinicalData); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHDoctorEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHDoctorEntity))]
		public virtual EntityCollection<CTHDoctorEntity> CTHDoctorCollectionViaCTHNotification { get { return GetOrCreateEntityCollection<CTHDoctorEntity, CTHDoctorEntityFactory>("CTHPatientCollectionViaCTHNotification", false, true, ref _cTHDoctorCollectionViaCTHNotification); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHKimoSurveyEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHKimoSurveyEntity))]
		public virtual EntityCollection<CTHKimoSurveyEntity> CTHKimoSurveyCollectionViaCTHNotification { get { return GetOrCreateEntityCollection<CTHKimoSurveyEntity, CTHKimoSurveyEntityFactory>("CTHPatientCollectionViaCTHNotification", false, true, ref _cTHKimoSurveyCollectionViaCTHNotification); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHKimoSurveyEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHKimoSurveyEntity))]
		public virtual EntityCollection<CTHKimoSurveyEntity> CTHKimoSurveyCollectionViaCTHPatientSymptom { get { return GetOrCreateEntityCollection<CTHKimoSurveyEntity, CTHKimoSurveyEntityFactory>("CTHPatientCollectionViaCTHPatientSymptom", false, true, ref _cTHKimoSurveyCollectionViaCTHPatientSymptom); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHPatientSymptomEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHPatientSymptomEntity))]
		public virtual EntityCollection<CTHPatientSymptomEntity> CTHPatientSymptomCollectionViaCTHNotification { get { return GetOrCreateEntityCollection<CTHPatientSymptomEntity, CTHPatientSymptomEntityFactory>("CTHPatientCollectionViaCTHNotification", false, true, ref _cTHPatientSymptomCollectionViaCTHNotification); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHStagingEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHStagingEntity))]
		public virtual EntityCollection<CTHStagingEntity> CTHStagingCollectionViaCTHPatientClinicalData { get { return GetOrCreateEntityCollection<CTHStagingEntity, CTHStagingEntityFactory>("CTHPatientCollectionViaCTHPatientClinicalData", false, true, ref _cTHStagingCollectionViaCTHPatientClinicalData); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHSymptomEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHSymptomEntity))]
		public virtual EntityCollection<CTHSymptomEntity> CTHSymptomCollectionViaCTHPatientSymptom { get { return GetOrCreateEntityCollection<CTHSymptomEntity, CTHSymptomEntityFactory>("CTHPatientCollectionViaCTHPatientSymptom", false, true, ref _cTHSymptomCollectionViaCTHPatientSymptom); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHTreatmentTypeEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHTreatmentTypeEntity))]
		public virtual EntityCollection<CTHTreatmentTypeEntity> CTHTreatmentTypeCollectionViaCTHPatientAssessment { get { return GetOrCreateEntityCollection<CTHTreatmentTypeEntity, CTHTreatmentTypeEntityFactory>("CTHPatientCollectionViaCTHPatientAssessment", false, true, ref _cTHTreatmentTypeCollectionViaCTHPatientAssessment); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHTreatmentTypeEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHTreatmentTypeEntity))]
		public virtual EntityCollection<CTHTreatmentTypeEntity> CTHTreatmentTypeCollectionViaCTHPatientAssessment1 { get { return GetOrCreateEntityCollection<CTHTreatmentTypeEntity, CTHTreatmentTypeEntityFactory>("CTHPatientCollectionViaCTHPatientAssessment1", false, true, ref _cTHTreatmentTypeCollectionViaCTHPatientAssessment1); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHTumorGradeEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHTumorGradeEntity))]
		public virtual EntityCollection<CTHTumorGradeEntity> CTHTumorGradeCollectionViaCTHPatientClinicalData { get { return GetOrCreateEntityCollection<CTHTumorGradeEntity, CTHTumorGradeEntityFactory>("CTHPatientCollectionViaCTHPatientClinicalData", false, true, ref _cTHTumorGradeCollectionViaCTHPatientClinicalData); } }

		/// <summary>Gets / sets related entity of type 'CTHDoctorEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHDoctorEntity CTHDoctorItem
		{
			get { return _cTHDoctorItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHDoctorItem"); }
		}

		/// <summary>Gets / sets related entity of type 'CTHPaymentTypeEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHPaymentTypeEntity CTHPaymentTypeItem
		{
			get { return _cTHPaymentTypeItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHPaymentTypeItem"); }
		}

		/// <summary>Gets / sets related entity of type 'CTHUserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHUserEntity CTHUserItem
		{
			get { return _cTHUserItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHUserItem"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace SStorm.CTH.DAL
{
	public enum CTHPatientFieldIndex
	{
		///<summary>ArCareProviderContactNumber. </summary>
		ArCareProviderContactNumber,
		///<summary>ArCareProviderName. </summary>
		ArCareProviderName,
		///<summary>ArCareProviderTitle. </summary>
		ArCareProviderTitle,
		///<summary>ArContactNumber. </summary>
		ArContactNumber,
		///<summary>ArNationalID. </summary>
		ArNationalID,
		///<summary>ArOccupation. </summary>
		ArOccupation,
		///<summary>ArPatientGender. </summary>
		ArPatientGender,
		///<summary>ArResidence. </summary>
		ArResidence,
		///<summary>ArSponserCompanyName. </summary>
		ArSponserCompanyName,
		///<summary>BirthDate. </summary>
		BirthDate,
		///<summary>CareProviderContactNumber. </summary>
		CareProviderContactNumber,
		///<summary>CareProviderName. </summary>
		CareProviderName,
		///<summary>CareProviderTitle. </summary>
		CareProviderTitle,
		///<summary>ContactNumber. </summary>
		ContactNumber,
		///<summary>DoctorID. </summary>
		DoctorID,
		///<summary>FirstVisitDate. </summary>
		FirstVisitDate,
		///<summary>ID. </summary>
		ID,
		///<summary>NationalID. </summary>
		NationalID,
		///<summary>NationalIDPhotoPath. </summary>
		NationalIDPhotoPath,
		///<summary>Occupation. </summary>
		Occupation,
		///<summary>PatientAge. </summary>
		PatientAge,
		///<summary>PatientGender. </summary>
		PatientGender,
		///<summary>PatientNameA. </summary>
		PatientNameA,
		///<summary>PatientNameE. </summary>
		PatientNameE,
		///<summary>PatientNumber. </summary>
		PatientNumber,
		///<summary>PaymentTypeId. </summary>
		PaymentTypeId,
		///<summary>Residence. </summary>
		Residence,
		///<summary>SponserCompanyName. </summary>
		SponserCompanyName,
		///<summary>UserID. </summary>
		UserID,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SStorm.CTH.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CTHPatient. </summary>
	public partial class CTHPatientRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between CTHPatientEntity and CTHNotificationEntity over the 1:n relation they have, using the relation between the fields: CTHPatient.ID - CTHNotification.PatientID</summary>
		public virtual IEntityRelation CTHNotificationEntityUsingPatientID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHNotificationCollection", true, new[] { CTHPatientFields.ID, CTHNotificationFields.PatientID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHPatientEntity and CTHPatientAssessmentEntity over the 1:n relation they have, using the relation between the fields: CTHPatient.ID - CTHPatientAssessment.PatientID</summary>
		public virtual IEntityRelation CTHPatientAssessmentEntityUsingPatientID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHPatientAssessmentCollection", true, new[] { CTHPatientFields.ID, CTHPatientAssessmentFields.PatientID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHPatientEntity and CTHPatientClinicalDataEntity over the 1:n relation they have, using the relation between the fields: CTHPatient.ID - CTHPatientClinicalData.PatientID</summary>
		public virtual IEntityRelation CTHPatientClinicalDataEntityUsingPatientID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHPatientClinicalDataCollection", true, new[] { CTHPatientFields.ID, CTHPatientClinicalDataFields.PatientID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHPatientEntity and CTHPatientSymptomEntity over the 1:n relation they have, using the relation between the fields: CTHPatient.ID - CTHPatientSymptom.PatientID</summary>
		public virtual IEntityRelation CTHPatientSymptomEntityUsingPatientID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHPatientSymptomCollection", true, new[] { CTHPatientFields.ID, CTHPatientSymptomFields.PatientID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHPatientEntity and CTHDoctorEntity over the m:1 relation they have, using the relation between the fields: CTHPatient.DoctorID - CTHDoctor.ID</summary>
		public virtual IEntityRelation CTHDoctorEntityUsingDoctorID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHDoctorItem", false, new[] { CTHDoctorFields.ID, CTHPatientFields.DoctorID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHPatientEntity and CTHPaymentTypeEntity over the m:1 relation they have, using the relation between the fields: CTHPatient.PaymentTypeId - CTHPaymentType.ID</summary>
		public virtual IEntityRelation CTHPaymentTypeEntityUsingPaymentTypeId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHPaymentTypeItem", false, new[] { CTHPaymentTypeFields.ID, CTHPatientFields.PaymentTypeId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHPatientEntity and CTHUserEntity over the m:1 relation they have, using the relation between the fields: CTHPatient.UserID - CTHUser.ID</summary>
		public virtual IEntityRelation CTHUserEntityUsingUserID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHUserItem", false, new[] { CTHUserFields.ID, CTHPatientFields.UserID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCTHPatientRelations
	{
		internal static readonly IEntityRelation CTHNotificationEntityUsingPatientIDStatic = new CTHPatientRelations().CTHNotificationEntityUsingPatientID;
		internal static readonly IEntityRelation CTHPatientAssessmentEntityUsingPatientIDStatic = new CTHPatientRelations().CTHPatientAssessmentEntityUsingPatientID;
		internal static readonly IEntityRelation CTHPatientClinicalDataEntityUsingPatientIDStatic = new CTHPatientRelations().CTHPatientClinicalDataEntityUsingPatientID;
		internal static readonly IEntityRelation CTHPatientSymptomEntityUsingPatientIDStatic = new CTHPatientRelations().CTHPatientSymptomEntityUsingPatientID;
		internal static readonly IEntityRelation CTHDoctorEntityUsingDoctorIDStatic = new CTHPatientRelations().CTHDoctorEntityUsingDoctorID;
		internal static readonly IEntityRelation CTHPaymentTypeEntityUsingPaymentTypeIdStatic = new CTHPatientRelations().CTHPaymentTypeEntityUsingPaymentTypeId;
		internal static readonly IEntityRelation CTHUserEntityUsingUserIDStatic = new CTHPatientRelations().CTHUserEntityUsingUserID;

		/// <summary>CTor</summary>
		static StaticCTHPatientRelations() { }
	}
}
