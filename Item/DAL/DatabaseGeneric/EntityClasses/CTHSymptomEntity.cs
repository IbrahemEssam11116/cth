//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.6.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SStorm.CTH.DAL.HelperClasses;
using SStorm.CTH.DAL.FactoryClasses;
using SStorm.CTH.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SStorm.CTH.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'CTHSymptom'.<br/><br/></summary>
	[Serializable]
	public partial class CTHSymptomEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<CTHDrugSymptomEntity> _cTHDrugSymptomCollection;
		private EntityCollection<CTHPatientSymptomEntity> _cTHPatientSymptomCollection;
		private EntityCollection<CTHSymptomDrugEntity> _cTHSymptomDrugCollection;
		private EntityCollection<CTHDrugEntity> _cTHDrugCollectionViaCTHDrugSymptom;
		private EntityCollection<CTHDrugEntity> _cTHDrugCollectionViaCTHSymptomDrug;
		private EntityCollection<CTHKimoSurveyEntity> _cTHKimoSurveyCollectionViaCTHPatientSymptom;
		private EntityCollection<CTHPatientEntity> _cTHPatientCollectionViaCTHPatientSymptom;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CTHSymptomEntityStaticMetaData _staticMetaData = new CTHSymptomEntityStaticMetaData();
		private static CTHSymptomRelations _relationsFactory = new CTHSymptomRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CTHDrugSymptomCollection</summary>
			public static readonly string CTHDrugSymptomCollection = "CTHDrugSymptomCollection";
			/// <summary>Member name CTHPatientSymptomCollection</summary>
			public static readonly string CTHPatientSymptomCollection = "CTHPatientSymptomCollection";
			/// <summary>Member name CTHSymptomDrugCollection</summary>
			public static readonly string CTHSymptomDrugCollection = "CTHSymptomDrugCollection";
			/// <summary>Member name CTHDrugCollectionViaCTHDrugSymptom</summary>
			public static readonly string CTHDrugCollectionViaCTHDrugSymptom = "CTHDrugCollectionViaCTHDrugSymptom";
			/// <summary>Member name CTHDrugCollectionViaCTHSymptomDrug</summary>
			public static readonly string CTHDrugCollectionViaCTHSymptomDrug = "CTHDrugCollectionViaCTHSymptomDrug";
			/// <summary>Member name CTHKimoSurveyCollectionViaCTHPatientSymptom</summary>
			public static readonly string CTHKimoSurveyCollectionViaCTHPatientSymptom = "CTHKimoSurveyCollectionViaCTHPatientSymptom";
			/// <summary>Member name CTHPatientCollectionViaCTHPatientSymptom</summary>
			public static readonly string CTHPatientCollectionViaCTHPatientSymptom = "CTHPatientCollectionViaCTHPatientSymptom";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CTHSymptomEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CTHSymptomEntityStaticMetaData()
			{
				SetEntityCoreInfo("CTHSymptomEntity", InheritanceHierarchyType.None, false, (int)SStorm.CTH.DAL.EntityType.CTHSymptomEntity, typeof(CTHSymptomEntity), typeof(CTHSymptomEntityFactory), false);
				AddNavigatorMetaData<CTHSymptomEntity, EntityCollection<CTHDrugSymptomEntity>>("CTHDrugSymptomCollection", a => a._cTHDrugSymptomCollection, (a, b) => a._cTHDrugSymptomCollection = b, a => a.CTHDrugSymptomCollection, () => new CTHSymptomRelations().CTHDrugSymptomEntityUsingSymtomID, typeof(CTHDrugSymptomEntity), (int)SStorm.CTH.DAL.EntityType.CTHDrugSymptomEntity);
				AddNavigatorMetaData<CTHSymptomEntity, EntityCollection<CTHPatientSymptomEntity>>("CTHPatientSymptomCollection", a => a._cTHPatientSymptomCollection, (a, b) => a._cTHPatientSymptomCollection = b, a => a.CTHPatientSymptomCollection, () => new CTHSymptomRelations().CTHPatientSymptomEntityUsingSymptomID, typeof(CTHPatientSymptomEntity), (int)SStorm.CTH.DAL.EntityType.CTHPatientSymptomEntity);
				AddNavigatorMetaData<CTHSymptomEntity, EntityCollection<CTHSymptomDrugEntity>>("CTHSymptomDrugCollection", a => a._cTHSymptomDrugCollection, (a, b) => a._cTHSymptomDrugCollection = b, a => a.CTHSymptomDrugCollection, () => new CTHSymptomRelations().CTHSymptomDrugEntityUsingSymptomId, typeof(CTHSymptomDrugEntity), (int)SStorm.CTH.DAL.EntityType.CTHSymptomDrugEntity);
				AddNavigatorMetaData<CTHSymptomEntity, EntityCollection<CTHDrugEntity>>("CTHDrugCollectionViaCTHDrugSymptom", a => a._cTHDrugCollectionViaCTHDrugSymptom, (a, b) => a._cTHDrugCollectionViaCTHDrugSymptom = b, a => a.CTHDrugCollectionViaCTHDrugSymptom, () => new CTHSymptomRelations().CTHDrugSymptomEntityUsingSymtomID, () => new CTHDrugSymptomRelations().CTHDrugEntityUsingDrugID, "CTHSymptomEntity__", "CTHDrugSymptom_", typeof(CTHDrugEntity), (int)SStorm.CTH.DAL.EntityType.CTHDrugEntity);
				AddNavigatorMetaData<CTHSymptomEntity, EntityCollection<CTHDrugEntity>>("CTHDrugCollectionViaCTHSymptomDrug", a => a._cTHDrugCollectionViaCTHSymptomDrug, (a, b) => a._cTHDrugCollectionViaCTHSymptomDrug = b, a => a.CTHDrugCollectionViaCTHSymptomDrug, () => new CTHSymptomRelations().CTHSymptomDrugEntityUsingSymptomId, () => new CTHSymptomDrugRelations().CTHDrugEntityUsingDrugID, "CTHSymptomEntity__", "CTHSymptomDrug_", typeof(CTHDrugEntity), (int)SStorm.CTH.DAL.EntityType.CTHDrugEntity);
				AddNavigatorMetaData<CTHSymptomEntity, EntityCollection<CTHKimoSurveyEntity>>("CTHKimoSurveyCollectionViaCTHPatientSymptom", a => a._cTHKimoSurveyCollectionViaCTHPatientSymptom, (a, b) => a._cTHKimoSurveyCollectionViaCTHPatientSymptom = b, a => a.CTHKimoSurveyCollectionViaCTHPatientSymptom, () => new CTHSymptomRelations().CTHPatientSymptomEntityUsingSymptomID, () => new CTHPatientSymptomRelations().CTHKimoSurveyEntityUsingChemoID, "CTHSymptomEntity__", "CTHPatientSymptom_", typeof(CTHKimoSurveyEntity), (int)SStorm.CTH.DAL.EntityType.CTHKimoSurveyEntity);
				AddNavigatorMetaData<CTHSymptomEntity, EntityCollection<CTHPatientEntity>>("CTHPatientCollectionViaCTHPatientSymptom", a => a._cTHPatientCollectionViaCTHPatientSymptom, (a, b) => a._cTHPatientCollectionViaCTHPatientSymptom = b, a => a.CTHPatientCollectionViaCTHPatientSymptom, () => new CTHSymptomRelations().CTHPatientSymptomEntityUsingSymptomID, () => new CTHPatientSymptomRelations().CTHPatientEntityUsingPatientID, "CTHSymptomEntity__", "CTHPatientSymptom_", typeof(CTHPatientEntity), (int)SStorm.CTH.DAL.EntityType.CTHPatientEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CTHSymptomEntity()
		{
		}

		/// <summary> CTor</summary>
		public CTHSymptomEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CTHSymptomEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CTHSymptomEntity</param>
		public CTHSymptomEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHSymptom which data should be fetched into this CTHSymptom object</param>
		public CTHSymptomEntity(System.Int32 iD) : this(iD, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHSymptom which data should be fetched into this CTHSymptom object</param>
		/// <param name="validator">The custom validator object for this CTHSymptomEntity</param>
		public CTHSymptomEntity(System.Int32 iD, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ID = iD;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CTHSymptomEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHDrugSymptom' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHDrugSymptomCollection() { return CreateRelationInfoForNavigator("CTHDrugSymptomCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHPatientSymptom' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientSymptomCollection() { return CreateRelationInfoForNavigator("CTHPatientSymptomCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHSymptomDrug' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHSymptomDrugCollection() { return CreateRelationInfoForNavigator("CTHSymptomDrugCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHDrug' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHDrugCollectionViaCTHDrugSymptom() { return CreateRelationInfoForNavigator("CTHDrugCollectionViaCTHDrugSymptom"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHDrug' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHDrugCollectionViaCTHSymptomDrug() { return CreateRelationInfoForNavigator("CTHDrugCollectionViaCTHSymptomDrug"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHKimoSurvey' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHKimoSurveyCollectionViaCTHPatientSymptom() { return CreateRelationInfoForNavigator("CTHKimoSurveyCollectionViaCTHPatientSymptom"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHPatient' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientCollectionViaCTHPatientSymptom() { return CreateRelationInfoForNavigator("CTHPatientCollectionViaCTHPatientSymptom"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CTHSymptomEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CTHSymptomRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHDrugSymptom' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHDrugSymptomCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHDrugSymptomCollection", CommonEntityBase.CreateEntityCollection<CTHDrugSymptomEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatientSymptom' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientSymptomCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientSymptomCollection", CommonEntityBase.CreateEntityCollection<CTHPatientSymptomEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHSymptomDrug' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHSymptomDrugCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHSymptomDrugCollection", CommonEntityBase.CreateEntityCollection<CTHSymptomDrugEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHDrug' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHDrugCollectionViaCTHDrugSymptom { get { return _staticMetaData.GetPrefetchPathElement("CTHDrugCollectionViaCTHDrugSymptom", CommonEntityBase.CreateEntityCollection<CTHDrugEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHDrug' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHDrugCollectionViaCTHSymptomDrug { get { return _staticMetaData.GetPrefetchPathElement("CTHDrugCollectionViaCTHSymptomDrug", CommonEntityBase.CreateEntityCollection<CTHDrugEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHKimoSurvey' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHKimoSurveyCollectionViaCTHPatientSymptom { get { return _staticMetaData.GetPrefetchPathElement("CTHKimoSurveyCollectionViaCTHPatientSymptom", CommonEntityBase.CreateEntityCollection<CTHKimoSurveyEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatient' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientCollectionViaCTHPatientSymptom { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientCollectionViaCTHPatientSymptom", CommonEntityBase.CreateEntityCollection<CTHPatientEntity>()); } }

		/// <summary>The AlertColor property of the Entity CTHSymptom<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHSymptom"."AlertColor".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String AlertColor
		{
			get { return (System.String)GetValue((int)CTHSymptomFieldIndex.AlertColor, true); }
			set	{ SetValue((int)CTHSymptomFieldIndex.AlertColor, value); }
		}

		/// <summary>The ArDescription property of the Entity CTHSymptom<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHSymptom"."ArDescription".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArDescription
		{
			get { return (System.String)GetValue((int)CTHSymptomFieldIndex.ArDescription, true); }
			set	{ SetValue((int)CTHSymptomFieldIndex.ArDescription, value); }
		}

		/// <summary>The ArName property of the Entity CTHSymptom<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHSymptom"."ArName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArName
		{
			get { return (System.String)GetValue((int)CTHSymptomFieldIndex.ArName, true); }
			set	{ SetValue((int)CTHSymptomFieldIndex.ArName, value); }
		}

		/// <summary>The ArRecommendation property of the Entity CTHSymptom<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHSymptom"."ArRecommendation".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArRecommendation
		{
			get { return (System.String)GetValue((int)CTHSymptomFieldIndex.ArRecommendation, true); }
			set	{ SetValue((int)CTHSymptomFieldIndex.ArRecommendation, value); }
		}

		/// <summary>The ArResponse property of the Entity CTHSymptom<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHSymptom"."ArResponse".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArResponse
		{
			get { return (System.String)GetValue((int)CTHSymptomFieldIndex.ArResponse, true); }
			set	{ SetValue((int)CTHSymptomFieldIndex.ArResponse, value); }
		}

		/// <summary>The Description property of the Entity CTHSymptom<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHSymptom"."Description".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Description
		{
			get { return (System.String)GetValue((int)CTHSymptomFieldIndex.Description, true); }
			set	{ SetValue((int)CTHSymptomFieldIndex.Description, value); }
		}

		/// <summary>The Grade property of the Entity CTHSymptom<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHSymptom"."Grade".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> Grade
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHSymptomFieldIndex.Grade, false); }
			set	{ SetValue((int)CTHSymptomFieldIndex.Grade, value); }
		}

		/// <summary>The ID property of the Entity CTHSymptom<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHSymptom"."ID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ID
		{
			get { return (System.Int32)GetValue((int)CTHSymptomFieldIndex.ID, true); }
			set { SetValue((int)CTHSymptomFieldIndex.ID, value); }		}

		/// <summary>The IsDoseLimitingToxicity property of the Entity CTHSymptom<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHSymptom"."IsDoseLimitingToxicity".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsDoseLimitingToxicity
		{
			get { return (System.Boolean)GetValue((int)CTHSymptomFieldIndex.IsDoseLimitingToxicity, true); }
			set	{ SetValue((int)CTHSymptomFieldIndex.IsDoseLimitingToxicity, value); }
		}

		/// <summary>The Name property of the Entity CTHSymptom<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHSymptom"."Name".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)CTHSymptomFieldIndex.Name, true); }
			set	{ SetValue((int)CTHSymptomFieldIndex.Name, value); }
		}

		/// <summary>The Recommendation property of the Entity CTHSymptom<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHSymptom"."Recommendation".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Recommendation
		{
			get { return (System.String)GetValue((int)CTHSymptomFieldIndex.Recommendation, true); }
			set	{ SetValue((int)CTHSymptomFieldIndex.Recommendation, value); }
		}

		/// <summary>The Response property of the Entity CTHSymptom<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHSymptom"."Response".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Response
		{
			get { return (System.String)GetValue((int)CTHSymptomFieldIndex.Response, true); }
			set	{ SetValue((int)CTHSymptomFieldIndex.Response, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHDrugSymptomEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHDrugSymptomEntity))]
		public virtual EntityCollection<CTHDrugSymptomEntity> CTHDrugSymptomCollection { get { return GetOrCreateEntityCollection<CTHDrugSymptomEntity, CTHDrugSymptomEntityFactory>("CTHSymptomItem", true, false, ref _cTHDrugSymptomCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHPatientSymptomEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHPatientSymptomEntity))]
		public virtual EntityCollection<CTHPatientSymptomEntity> CTHPatientSymptomCollection { get { return GetOrCreateEntityCollection<CTHPatientSymptomEntity, CTHPatientSymptomEntityFactory>("CTHSymptomItem", true, false, ref _cTHPatientSymptomCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHSymptomDrugEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHSymptomDrugEntity))]
		public virtual EntityCollection<CTHSymptomDrugEntity> CTHSymptomDrugCollection { get { return GetOrCreateEntityCollection<CTHSymptomDrugEntity, CTHSymptomDrugEntityFactory>("CTHSymptomItem", true, false, ref _cTHSymptomDrugCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHDrugEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHDrugEntity))]
		public virtual EntityCollection<CTHDrugEntity> CTHDrugCollectionViaCTHDrugSymptom { get { return GetOrCreateEntityCollection<CTHDrugEntity, CTHDrugEntityFactory>("CTHSymptomCollectionViaCTHDrugSymptom", false, true, ref _cTHDrugCollectionViaCTHDrugSymptom); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHDrugEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHDrugEntity))]
		public virtual EntityCollection<CTHDrugEntity> CTHDrugCollectionViaCTHSymptomDrug { get { return GetOrCreateEntityCollection<CTHDrugEntity, CTHDrugEntityFactory>("CTHSymptomCollectionViaCTHSymptomDrug", false, true, ref _cTHDrugCollectionViaCTHSymptomDrug); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHKimoSurveyEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHKimoSurveyEntity))]
		public virtual EntityCollection<CTHKimoSurveyEntity> CTHKimoSurveyCollectionViaCTHPatientSymptom { get { return GetOrCreateEntityCollection<CTHKimoSurveyEntity, CTHKimoSurveyEntityFactory>("CTHSymptomCollectionViaCTHPatientSymptom", false, true, ref _cTHKimoSurveyCollectionViaCTHPatientSymptom); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHPatientEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHPatientEntity))]
		public virtual EntityCollection<CTHPatientEntity> CTHPatientCollectionViaCTHPatientSymptom { get { return GetOrCreateEntityCollection<CTHPatientEntity, CTHPatientEntityFactory>("CTHSymptomCollectionViaCTHPatientSymptom", false, true, ref _cTHPatientCollectionViaCTHPatientSymptom); } }
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace SStorm.CTH.DAL
{
	public enum CTHSymptomFieldIndex
	{
		///<summary>AlertColor. </summary>
		AlertColor,
		///<summary>ArDescription. </summary>
		ArDescription,
		///<summary>ArName. </summary>
		ArName,
		///<summary>ArRecommendation. </summary>
		ArRecommendation,
		///<summary>ArResponse. </summary>
		ArResponse,
		///<summary>Description. </summary>
		Description,
		///<summary>Grade. </summary>
		Grade,
		///<summary>ID. </summary>
		ID,
		///<summary>IsDoseLimitingToxicity. </summary>
		IsDoseLimitingToxicity,
		///<summary>Name. </summary>
		Name,
		///<summary>Recommendation. </summary>
		Recommendation,
		///<summary>Response. </summary>
		Response,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SStorm.CTH.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CTHSymptom. </summary>
	public partial class CTHSymptomRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between CTHSymptomEntity and CTHDrugSymptomEntity over the 1:n relation they have, using the relation between the fields: CTHSymptom.ID - CTHDrugSymptom.SymtomID</summary>
		public virtual IEntityRelation CTHDrugSymptomEntityUsingSymtomID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHDrugSymptomCollection", true, new[] { CTHSymptomFields.ID, CTHDrugSymptomFields.SymtomID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHSymptomEntity and CTHPatientSymptomEntity over the 1:n relation they have, using the relation between the fields: CTHSymptom.ID - CTHPatientSymptom.SymptomID</summary>
		public virtual IEntityRelation CTHPatientSymptomEntityUsingSymptomID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHPatientSymptomCollection", true, new[] { CTHSymptomFields.ID, CTHPatientSymptomFields.SymptomID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHSymptomEntity and CTHSymptomDrugEntity over the 1:n relation they have, using the relation between the fields: CTHSymptom.ID - CTHSymptomDrug.SymptomId</summary>
		public virtual IEntityRelation CTHSymptomDrugEntityUsingSymptomId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHSymptomDrugCollection", true, new[] { CTHSymptomFields.ID, CTHSymptomDrugFields.SymptomId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCTHSymptomRelations
	{
		internal static readonly IEntityRelation CTHDrugSymptomEntityUsingSymtomIDStatic = new CTHSymptomRelations().CTHDrugSymptomEntityUsingSymtomID;
		internal static readonly IEntityRelation CTHPatientSymptomEntityUsingSymptomIDStatic = new CTHSymptomRelations().CTHPatientSymptomEntityUsingSymptomID;
		internal static readonly IEntityRelation CTHSymptomDrugEntityUsingSymptomIdStatic = new CTHSymptomRelations().CTHSymptomDrugEntityUsingSymptomId;

		/// <summary>CTor</summary>
		static StaticCTHSymptomRelations() { }
	}
}
