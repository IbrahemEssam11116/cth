//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.6.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SStorm.CTH.DAL.HelperClasses;
using SStorm.CTH.DAL.FactoryClasses;
using SStorm.CTH.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SStorm.CTH.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'CTHPatientAssessment'.<br/><br/></summary>
	[Serializable]
	public partial class CTHPatientAssessmentEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private CTHPatientEntity _cTHPatientItem;
		private CTHTreatmentTypeEntity _cTHTreatmentTypeItem;
		private CTHTreatmentTypeEntity _cTHTreatmentTypeItem1;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CTHPatientAssessmentEntityStaticMetaData _staticMetaData = new CTHPatientAssessmentEntityStaticMetaData();
		private static CTHPatientAssessmentRelations _relationsFactory = new CTHPatientAssessmentRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CTHPatientItem</summary>
			public static readonly string CTHPatientItem = "CTHPatientItem";
			/// <summary>Member name CTHTreatmentTypeItem</summary>
			public static readonly string CTHTreatmentTypeItem = "CTHTreatmentTypeItem";
			/// <summary>Member name CTHTreatmentTypeItem1</summary>
			public static readonly string CTHTreatmentTypeItem1 = "CTHTreatmentTypeItem1";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CTHPatientAssessmentEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CTHPatientAssessmentEntityStaticMetaData()
			{
				SetEntityCoreInfo("CTHPatientAssessmentEntity", InheritanceHierarchyType.None, false, (int)SStorm.CTH.DAL.EntityType.CTHPatientAssessmentEntity, typeof(CTHPatientAssessmentEntity), typeof(CTHPatientAssessmentEntityFactory), false);
				AddNavigatorMetaData<CTHPatientAssessmentEntity, CTHPatientEntity>("CTHPatientItem", "CTHPatientAssessmentCollection", (a, b) => a._cTHPatientItem = b, a => a._cTHPatientItem, (a, b) => a.CTHPatientItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHPatientAssessmentRelations.CTHPatientEntityUsingPatientIDStatic, ()=>new CTHPatientAssessmentRelations().CTHPatientEntityUsingPatientID, null, new int[] { (int)CTHPatientAssessmentFieldIndex.PatientID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHPatientEntity);
				AddNavigatorMetaData<CTHPatientAssessmentEntity, CTHTreatmentTypeEntity>("CTHTreatmentTypeItem", "CTHPatientAssessmentCollection", (a, b) => a._cTHTreatmentTypeItem = b, a => a._cTHTreatmentTypeItem, (a, b) => a.CTHTreatmentTypeItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHPatientAssessmentRelations.CTHTreatmentTypeEntityUsingTreatmentPlanIDStatic, ()=>new CTHPatientAssessmentRelations().CTHTreatmentTypeEntityUsingTreatmentPlanID, null, new int[] { (int)CTHPatientAssessmentFieldIndex.TreatmentPlanID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHTreatmentTypeEntity);
				AddNavigatorMetaData<CTHPatientAssessmentEntity, CTHTreatmentTypeEntity>("CTHTreatmentTypeItem1", "CTHPatientAssessmentCollection1", (a, b) => a._cTHTreatmentTypeItem1 = b, a => a._cTHTreatmentTypeItem1, (a, b) => a.CTHTreatmentTypeItem1 = b, SStorm.CTH.DAL.RelationClasses.StaticCTHPatientAssessmentRelations.CTHTreatmentTypeEntityUsingTreatmentResponseIDStatic, ()=>new CTHPatientAssessmentRelations().CTHTreatmentTypeEntityUsingTreatmentResponseID, null, new int[] { (int)CTHPatientAssessmentFieldIndex.TreatmentResponseID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHTreatmentTypeEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CTHPatientAssessmentEntity()
		{
		}

		/// <summary> CTor</summary>
		public CTHPatientAssessmentEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CTHPatientAssessmentEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CTHPatientAssessmentEntity</param>
		public CTHPatientAssessmentEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHPatientAssessment which data should be fetched into this CTHPatientAssessment object</param>
		public CTHPatientAssessmentEntity(System.Int32 iD) : this(iD, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHPatientAssessment which data should be fetched into this CTHPatientAssessment object</param>
		/// <param name="validator">The custom validator object for this CTHPatientAssessmentEntity</param>
		public CTHPatientAssessmentEntity(System.Int32 iD, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ID = iD;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CTHPatientAssessmentEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHPatient' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientItem() { return CreateRelationInfoForNavigator("CTHPatientItem"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHTreatmentType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHTreatmentTypeItem() { return CreateRelationInfoForNavigator("CTHTreatmentTypeItem"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHTreatmentType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHTreatmentTypeItem1() { return CreateRelationInfoForNavigator("CTHTreatmentTypeItem1"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CTHPatientAssessmentEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CTHPatientAssessmentRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatient' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientItem { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientItem", CommonEntityBase.CreateEntityCollection<CTHPatientEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHTreatmentType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHTreatmentTypeItem { get { return _staticMetaData.GetPrefetchPathElement("CTHTreatmentTypeItem", CommonEntityBase.CreateEntityCollection<CTHTreatmentTypeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHTreatmentType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHTreatmentTypeItem1 { get { return _staticMetaData.GetPrefetchPathElement("CTHTreatmentTypeItem1", CommonEntityBase.CreateEntityCollection<CTHTreatmentTypeEntity>()); } }

		/// <summary>The Date property of the Entity CTHPatientAssessment<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientAssessment"."Date".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> Date
		{
			get { return (Nullable<System.DateTime>)GetValue((int)CTHPatientAssessmentFieldIndex.Date, false); }
			set	{ SetValue((int)CTHPatientAssessmentFieldIndex.Date, value); }
		}

		/// <summary>The ID property of the Entity CTHPatientAssessment<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientAssessment"."ID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ID
		{
			get { return (System.Int32)GetValue((int)CTHPatientAssessmentFieldIndex.ID, true); }
			set { SetValue((int)CTHPatientAssessmentFieldIndex.ID, value); }		}

		/// <summary>The PatientID property of the Entity CTHPatientAssessment<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientAssessment"."PatientID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> PatientID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHPatientAssessmentFieldIndex.PatientID, false); }
			set	{ SetValue((int)CTHPatientAssessmentFieldIndex.PatientID, value); }
		}

		/// <summary>The TreatmentPlanID property of the Entity CTHPatientAssessment<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientAssessment"."TreatmentPlanID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> TreatmentPlanID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHPatientAssessmentFieldIndex.TreatmentPlanID, false); }
			set	{ SetValue((int)CTHPatientAssessmentFieldIndex.TreatmentPlanID, value); }
		}

		/// <summary>The TreatmentResponseID property of the Entity CTHPatientAssessment<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientAssessment"."TreatmentResponseID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> TreatmentResponseID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHPatientAssessmentFieldIndex.TreatmentResponseID, false); }
			set	{ SetValue((int)CTHPatientAssessmentFieldIndex.TreatmentResponseID, value); }
		}

		/// <summary>Gets / sets related entity of type 'CTHPatientEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHPatientEntity CTHPatientItem
		{
			get { return _cTHPatientItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHPatientItem"); }
		}

		/// <summary>Gets / sets related entity of type 'CTHTreatmentTypeEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHTreatmentTypeEntity CTHTreatmentTypeItem
		{
			get { return _cTHTreatmentTypeItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHTreatmentTypeItem"); }
		}

		/// <summary>Gets / sets related entity of type 'CTHTreatmentTypeEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHTreatmentTypeEntity CTHTreatmentTypeItem1
		{
			get { return _cTHTreatmentTypeItem1; }
			set { SetSingleRelatedEntityNavigator(value, "CTHTreatmentTypeItem1"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace SStorm.CTH.DAL
{
	public enum CTHPatientAssessmentFieldIndex
	{
		///<summary>Date. </summary>
		Date,
		///<summary>ID. </summary>
		ID,
		///<summary>PatientID. </summary>
		PatientID,
		///<summary>TreatmentPlanID. </summary>
		TreatmentPlanID,
		///<summary>TreatmentResponseID. </summary>
		TreatmentResponseID,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SStorm.CTH.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CTHPatientAssessment. </summary>
	public partial class CTHPatientAssessmentRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between CTHPatientAssessmentEntity and CTHPatientEntity over the m:1 relation they have, using the relation between the fields: CTHPatientAssessment.PatientID - CTHPatient.ID</summary>
		public virtual IEntityRelation CTHPatientEntityUsingPatientID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHPatientItem", false, new[] { CTHPatientFields.ID, CTHPatientAssessmentFields.PatientID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHPatientAssessmentEntity and CTHTreatmentTypeEntity over the m:1 relation they have, using the relation between the fields: CTHPatientAssessment.TreatmentPlanID - CTHTreatmentType.ID</summary>
		public virtual IEntityRelation CTHTreatmentTypeEntityUsingTreatmentPlanID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHTreatmentTypeItem", false, new[] { CTHTreatmentTypeFields.ID, CTHPatientAssessmentFields.TreatmentPlanID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHPatientAssessmentEntity and CTHTreatmentTypeEntity over the m:1 relation they have, using the relation between the fields: CTHPatientAssessment.TreatmentResponseID - CTHTreatmentType.ID</summary>
		public virtual IEntityRelation CTHTreatmentTypeEntityUsingTreatmentResponseID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHTreatmentTypeItem1", false, new[] { CTHTreatmentTypeFields.ID, CTHPatientAssessmentFields.TreatmentResponseID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCTHPatientAssessmentRelations
	{
		internal static readonly IEntityRelation CTHPatientEntityUsingPatientIDStatic = new CTHPatientAssessmentRelations().CTHPatientEntityUsingPatientID;
		internal static readonly IEntityRelation CTHTreatmentTypeEntityUsingTreatmentPlanIDStatic = new CTHPatientAssessmentRelations().CTHTreatmentTypeEntityUsingTreatmentPlanID;
		internal static readonly IEntityRelation CTHTreatmentTypeEntityUsingTreatmentResponseIDStatic = new CTHPatientAssessmentRelations().CTHTreatmentTypeEntityUsingTreatmentResponseID;

		/// <summary>CTor</summary>
		static StaticCTHPatientAssessmentRelations() { }
	}
}
