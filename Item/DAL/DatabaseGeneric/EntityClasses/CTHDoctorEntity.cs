//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.6.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SStorm.CTH.DAL.HelperClasses;
using SStorm.CTH.DAL.FactoryClasses;
using SStorm.CTH.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SStorm.CTH.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'CTHDoctor'.<br/><br/></summary>
	[Serializable]
	public partial class CTHDoctorEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<CTHNotificationEntity> _cTHNotificationCollection;
		private EntityCollection<CTHPatientEntity> _cTHPatientCollection;
		private EntityCollection<CTHKimoSurveyEntity> _cTHKimoSurveyCollectionViaCTHNotification;
		private EntityCollection<CTHPatientEntity> _cTHPatientCollectionViaCTHNotification;
		private EntityCollection<CTHPatientSymptomEntity> _cTHPatientSymptomCollectionViaCTHNotification;
		private EntityCollection<CTHPaymentTypeEntity> _cTHPaymentTypeCollectionViaCTHPatient;
		private EntityCollection<CTHUserEntity> _cTHUserCollectionViaCTHPatient;
		private CTHUserEntity _cTHUserItem;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CTHDoctorEntityStaticMetaData _staticMetaData = new CTHDoctorEntityStaticMetaData();
		private static CTHDoctorRelations _relationsFactory = new CTHDoctorRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CTHUserItem</summary>
			public static readonly string CTHUserItem = "CTHUserItem";
			/// <summary>Member name CTHNotificationCollection</summary>
			public static readonly string CTHNotificationCollection = "CTHNotificationCollection";
			/// <summary>Member name CTHPatientCollection</summary>
			public static readonly string CTHPatientCollection = "CTHPatientCollection";
			/// <summary>Member name CTHKimoSurveyCollectionViaCTHNotification</summary>
			public static readonly string CTHKimoSurveyCollectionViaCTHNotification = "CTHKimoSurveyCollectionViaCTHNotification";
			/// <summary>Member name CTHPatientCollectionViaCTHNotification</summary>
			public static readonly string CTHPatientCollectionViaCTHNotification = "CTHPatientCollectionViaCTHNotification";
			/// <summary>Member name CTHPatientSymptomCollectionViaCTHNotification</summary>
			public static readonly string CTHPatientSymptomCollectionViaCTHNotification = "CTHPatientSymptomCollectionViaCTHNotification";
			/// <summary>Member name CTHPaymentTypeCollectionViaCTHPatient</summary>
			public static readonly string CTHPaymentTypeCollectionViaCTHPatient = "CTHPaymentTypeCollectionViaCTHPatient";
			/// <summary>Member name CTHUserCollectionViaCTHPatient</summary>
			public static readonly string CTHUserCollectionViaCTHPatient = "CTHUserCollectionViaCTHPatient";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CTHDoctorEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CTHDoctorEntityStaticMetaData()
			{
				SetEntityCoreInfo("CTHDoctorEntity", InheritanceHierarchyType.None, false, (int)SStorm.CTH.DAL.EntityType.CTHDoctorEntity, typeof(CTHDoctorEntity), typeof(CTHDoctorEntityFactory), false);
				AddNavigatorMetaData<CTHDoctorEntity, EntityCollection<CTHNotificationEntity>>("CTHNotificationCollection", a => a._cTHNotificationCollection, (a, b) => a._cTHNotificationCollection = b, a => a.CTHNotificationCollection, () => new CTHDoctorRelations().CTHNotificationEntityUsingDoctorID, typeof(CTHNotificationEntity), (int)SStorm.CTH.DAL.EntityType.CTHNotificationEntity);
				AddNavigatorMetaData<CTHDoctorEntity, EntityCollection<CTHPatientEntity>>("CTHPatientCollection", a => a._cTHPatientCollection, (a, b) => a._cTHPatientCollection = b, a => a.CTHPatientCollection, () => new CTHDoctorRelations().CTHPatientEntityUsingDoctorID, typeof(CTHPatientEntity), (int)SStorm.CTH.DAL.EntityType.CTHPatientEntity);
				AddNavigatorMetaData<CTHDoctorEntity, CTHUserEntity>("CTHUserItem", "CTHDoctorCollection", (a, b) => a._cTHUserItem = b, a => a._cTHUserItem, (a, b) => a.CTHUserItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHDoctorRelations.CTHUserEntityUsingUserIDStatic, ()=>new CTHDoctorRelations().CTHUserEntityUsingUserID, null, new int[] { (int)CTHDoctorFieldIndex.UserID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHUserEntity);
				AddNavigatorMetaData<CTHDoctorEntity, EntityCollection<CTHKimoSurveyEntity>>("CTHKimoSurveyCollectionViaCTHNotification", a => a._cTHKimoSurveyCollectionViaCTHNotification, (a, b) => a._cTHKimoSurveyCollectionViaCTHNotification = b, a => a.CTHKimoSurveyCollectionViaCTHNotification, () => new CTHDoctorRelations().CTHNotificationEntityUsingDoctorID, () => new CTHNotificationRelations().CTHKimoSurveyEntityUsingKimoID, "CTHDoctorEntity__", "CTHNotification_", typeof(CTHKimoSurveyEntity), (int)SStorm.CTH.DAL.EntityType.CTHKimoSurveyEntity);
				AddNavigatorMetaData<CTHDoctorEntity, EntityCollection<CTHPatientEntity>>("CTHPatientCollectionViaCTHNotification", a => a._cTHPatientCollectionViaCTHNotification, (a, b) => a._cTHPatientCollectionViaCTHNotification = b, a => a.CTHPatientCollectionViaCTHNotification, () => new CTHDoctorRelations().CTHNotificationEntityUsingDoctorID, () => new CTHNotificationRelations().CTHPatientEntityUsingPatientID, "CTHDoctorEntity__", "CTHNotification_", typeof(CTHPatientEntity), (int)SStorm.CTH.DAL.EntityType.CTHPatientEntity);
				AddNavigatorMetaData<CTHDoctorEntity, EntityCollection<CTHPatientSymptomEntity>>("CTHPatientSymptomCollectionViaCTHNotification", a => a._cTHPatientSymptomCollectionViaCTHNotification, (a, b) => a._cTHPatientSymptomCollectionViaCTHNotification = b, a => a.CTHPatientSymptomCollectionViaCTHNotification, () => new CTHDoctorRelations().CTHNotificationEntityUsingDoctorID, () => new CTHNotificationRelations().CTHPatientSymptomEntityUsingPatientSymptomID, "CTHDoctorEntity__", "CTHNotification_", typeof(CTHPatientSymptomEntity), (int)SStorm.CTH.DAL.EntityType.CTHPatientSymptomEntity);
				AddNavigatorMetaData<CTHDoctorEntity, EntityCollection<CTHPaymentTypeEntity>>("CTHPaymentTypeCollectionViaCTHPatient", a => a._cTHPaymentTypeCollectionViaCTHPatient, (a, b) => a._cTHPaymentTypeCollectionViaCTHPatient = b, a => a.CTHPaymentTypeCollectionViaCTHPatient, () => new CTHDoctorRelations().CTHPatientEntityUsingDoctorID, () => new CTHPatientRelations().CTHPaymentTypeEntityUsingPaymentTypeId, "CTHDoctorEntity__", "CTHPatient_", typeof(CTHPaymentTypeEntity), (int)SStorm.CTH.DAL.EntityType.CTHPaymentTypeEntity);
				AddNavigatorMetaData<CTHDoctorEntity, EntityCollection<CTHUserEntity>>("CTHUserCollectionViaCTHPatient", a => a._cTHUserCollectionViaCTHPatient, (a, b) => a._cTHUserCollectionViaCTHPatient = b, a => a.CTHUserCollectionViaCTHPatient, () => new CTHDoctorRelations().CTHPatientEntityUsingDoctorID, () => new CTHPatientRelations().CTHUserEntityUsingUserID, "CTHDoctorEntity__", "CTHPatient_", typeof(CTHUserEntity), (int)SStorm.CTH.DAL.EntityType.CTHUserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CTHDoctorEntity()
		{
		}

		/// <summary> CTor</summary>
		public CTHDoctorEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CTHDoctorEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CTHDoctorEntity</param>
		public CTHDoctorEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHDoctor which data should be fetched into this CTHDoctor object</param>
		public CTHDoctorEntity(System.Int32 iD) : this(iD, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHDoctor which data should be fetched into this CTHDoctor object</param>
		/// <param name="validator">The custom validator object for this CTHDoctorEntity</param>
		public CTHDoctorEntity(System.Int32 iD, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ID = iD;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CTHDoctorEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHNotification' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHNotificationCollection() { return CreateRelationInfoForNavigator("CTHNotificationCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHPatient' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientCollection() { return CreateRelationInfoForNavigator("CTHPatientCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHKimoSurvey' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHKimoSurveyCollectionViaCTHNotification() { return CreateRelationInfoForNavigator("CTHKimoSurveyCollectionViaCTHNotification"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHPatient' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientCollectionViaCTHNotification() { return CreateRelationInfoForNavigator("CTHPatientCollectionViaCTHNotification"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHPatientSymptom' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientSymptomCollectionViaCTHNotification() { return CreateRelationInfoForNavigator("CTHPatientSymptomCollectionViaCTHNotification"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHPaymentType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPaymentTypeCollectionViaCTHPatient() { return CreateRelationInfoForNavigator("CTHPaymentTypeCollectionViaCTHPatient"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHUser' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHUserCollectionViaCTHPatient() { return CreateRelationInfoForNavigator("CTHUserCollectionViaCTHPatient"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHUser' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHUserItem() { return CreateRelationInfoForNavigator("CTHUserItem"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CTHDoctorEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CTHDoctorRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHNotification' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHNotificationCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHNotificationCollection", CommonEntityBase.CreateEntityCollection<CTHNotificationEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatient' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientCollection", CommonEntityBase.CreateEntityCollection<CTHPatientEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHKimoSurvey' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHKimoSurveyCollectionViaCTHNotification { get { return _staticMetaData.GetPrefetchPathElement("CTHKimoSurveyCollectionViaCTHNotification", CommonEntityBase.CreateEntityCollection<CTHKimoSurveyEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatient' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientCollectionViaCTHNotification { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientCollectionViaCTHNotification", CommonEntityBase.CreateEntityCollection<CTHPatientEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatientSymptom' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientSymptomCollectionViaCTHNotification { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientSymptomCollectionViaCTHNotification", CommonEntityBase.CreateEntityCollection<CTHPatientSymptomEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPaymentType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPaymentTypeCollectionViaCTHPatient { get { return _staticMetaData.GetPrefetchPathElement("CTHPaymentTypeCollectionViaCTHPatient", CommonEntityBase.CreateEntityCollection<CTHPaymentTypeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHUser' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHUserCollectionViaCTHPatient { get { return _staticMetaData.GetPrefetchPathElement("CTHUserCollectionViaCTHPatient", CommonEntityBase.CreateEntityCollection<CTHUserEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHUser' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHUserItem { get { return _staticMetaData.GetPrefetchPathElement("CTHUserItem", CommonEntityBase.CreateEntityCollection<CTHUserEntity>()); } }

		/// <summary>The ArContactNumber property of the Entity CTHDoctor<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDoctor"."ArContactNumber".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArContactNumber
		{
			get { return (System.String)GetValue((int)CTHDoctorFieldIndex.ArContactNumber, true); }
			set	{ SetValue((int)CTHDoctorFieldIndex.ArContactNumber, value); }
		}

		/// <summary>The ArDegree property of the Entity CTHDoctor<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDoctor"."ArDegree".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArDegree
		{
			get { return (System.String)GetValue((int)CTHDoctorFieldIndex.ArDegree, true); }
			set	{ SetValue((int)CTHDoctorFieldIndex.ArDegree, value); }
		}

		/// <summary>The ArName property of the Entity CTHDoctor<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDoctor"."ArName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArName
		{
			get { return (System.String)GetValue((int)CTHDoctorFieldIndex.ArName, true); }
			set	{ SetValue((int)CTHDoctorFieldIndex.ArName, value); }
		}

		/// <summary>The ContactNumber property of the Entity CTHDoctor<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDoctor"."ContactNumber".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ContactNumber
		{
			get { return (System.String)GetValue((int)CTHDoctorFieldIndex.ContactNumber, true); }
			set	{ SetValue((int)CTHDoctorFieldIndex.ContactNumber, value); }
		}

		/// <summary>The Degree property of the Entity CTHDoctor<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDoctor"."Degree".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Degree
		{
			get { return (System.String)GetValue((int)CTHDoctorFieldIndex.Degree, true); }
			set	{ SetValue((int)CTHDoctorFieldIndex.Degree, value); }
		}

		/// <summary>The ID property of the Entity CTHDoctor<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDoctor"."ID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ID
		{
			get { return (System.Int32)GetValue((int)CTHDoctorFieldIndex.ID, true); }
			set { SetValue((int)CTHDoctorFieldIndex.ID, value); }		}

		/// <summary>The Name property of the Entity CTHDoctor<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDoctor"."Name".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)CTHDoctorFieldIndex.Name, true); }
			set	{ SetValue((int)CTHDoctorFieldIndex.Name, value); }
		}

		/// <summary>The UserID property of the Entity CTHDoctor<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDoctor"."UserID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> UserID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHDoctorFieldIndex.UserID, false); }
			set	{ SetValue((int)CTHDoctorFieldIndex.UserID, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHNotificationEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHNotificationEntity))]
		public virtual EntityCollection<CTHNotificationEntity> CTHNotificationCollection { get { return GetOrCreateEntityCollection<CTHNotificationEntity, CTHNotificationEntityFactory>("CTHDoctorItem", true, false, ref _cTHNotificationCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHPatientEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHPatientEntity))]
		public virtual EntityCollection<CTHPatientEntity> CTHPatientCollection { get { return GetOrCreateEntityCollection<CTHPatientEntity, CTHPatientEntityFactory>("CTHDoctorItem", true, false, ref _cTHPatientCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHKimoSurveyEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHKimoSurveyEntity))]
		public virtual EntityCollection<CTHKimoSurveyEntity> CTHKimoSurveyCollectionViaCTHNotification { get { return GetOrCreateEntityCollection<CTHKimoSurveyEntity, CTHKimoSurveyEntityFactory>("CTHDoctorCollectionViaCTHNotification", false, true, ref _cTHKimoSurveyCollectionViaCTHNotification); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHPatientEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHPatientEntity))]
		public virtual EntityCollection<CTHPatientEntity> CTHPatientCollectionViaCTHNotification { get { return GetOrCreateEntityCollection<CTHPatientEntity, CTHPatientEntityFactory>("CTHDoctorCollectionViaCTHNotification", false, true, ref _cTHPatientCollectionViaCTHNotification); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHPatientSymptomEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHPatientSymptomEntity))]
		public virtual EntityCollection<CTHPatientSymptomEntity> CTHPatientSymptomCollectionViaCTHNotification { get { return GetOrCreateEntityCollection<CTHPatientSymptomEntity, CTHPatientSymptomEntityFactory>("CTHDoctorCollectionViaCTHNotification", false, true, ref _cTHPatientSymptomCollectionViaCTHNotification); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHPaymentTypeEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHPaymentTypeEntity))]
		public virtual EntityCollection<CTHPaymentTypeEntity> CTHPaymentTypeCollectionViaCTHPatient { get { return GetOrCreateEntityCollection<CTHPaymentTypeEntity, CTHPaymentTypeEntityFactory>("CTHDoctorCollectionViaCTHPatient", false, true, ref _cTHPaymentTypeCollectionViaCTHPatient); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHUserEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHUserEntity))]
		public virtual EntityCollection<CTHUserEntity> CTHUserCollectionViaCTHPatient { get { return GetOrCreateEntityCollection<CTHUserEntity, CTHUserEntityFactory>("CTHDoctorCollectionViaCTHPatient", false, true, ref _cTHUserCollectionViaCTHPatient); } }

		/// <summary>Gets / sets related entity of type 'CTHUserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHUserEntity CTHUserItem
		{
			get { return _cTHUserItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHUserItem"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace SStorm.CTH.DAL
{
	public enum CTHDoctorFieldIndex
	{
		///<summary>ArContactNumber. </summary>
		ArContactNumber,
		///<summary>ArDegree. </summary>
		ArDegree,
		///<summary>ArName. </summary>
		ArName,
		///<summary>ContactNumber. </summary>
		ContactNumber,
		///<summary>Degree. </summary>
		Degree,
		///<summary>ID. </summary>
		ID,
		///<summary>Name. </summary>
		Name,
		///<summary>UserID. </summary>
		UserID,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SStorm.CTH.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CTHDoctor. </summary>
	public partial class CTHDoctorRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between CTHDoctorEntity and CTHNotificationEntity over the 1:n relation they have, using the relation between the fields: CTHDoctor.ID - CTHNotification.DoctorID</summary>
		public virtual IEntityRelation CTHNotificationEntityUsingDoctorID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHNotificationCollection", true, new[] { CTHDoctorFields.ID, CTHNotificationFields.DoctorID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHDoctorEntity and CTHPatientEntity over the 1:n relation they have, using the relation between the fields: CTHDoctor.ID - CTHPatient.DoctorID</summary>
		public virtual IEntityRelation CTHPatientEntityUsingDoctorID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHPatientCollection", true, new[] { CTHDoctorFields.ID, CTHPatientFields.DoctorID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHDoctorEntity and CTHUserEntity over the m:1 relation they have, using the relation between the fields: CTHDoctor.UserID - CTHUser.ID</summary>
		public virtual IEntityRelation CTHUserEntityUsingUserID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHUserItem", false, new[] { CTHUserFields.ID, CTHDoctorFields.UserID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCTHDoctorRelations
	{
		internal static readonly IEntityRelation CTHNotificationEntityUsingDoctorIDStatic = new CTHDoctorRelations().CTHNotificationEntityUsingDoctorID;
		internal static readonly IEntityRelation CTHPatientEntityUsingDoctorIDStatic = new CTHDoctorRelations().CTHPatientEntityUsingDoctorID;
		internal static readonly IEntityRelation CTHUserEntityUsingUserIDStatic = new CTHDoctorRelations().CTHUserEntityUsingUserID;

		/// <summary>CTor</summary>
		static StaticCTHDoctorRelations() { }
	}
}
