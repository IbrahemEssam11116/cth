//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.6.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SStorm.CTH.DAL.HelperClasses;
using SStorm.CTH.DAL.FactoryClasses;
using SStorm.CTH.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SStorm.CTH.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'CTHDrug'.<br/><br/></summary>
	[Serializable]
	public partial class CTHDrugEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<CTHCycleDrugEntity> _cTHCycleDrugCollection;
		private EntityCollection<CTHDrugAttachmentEntity> _cTHDrugAttachmentCollection;
		private EntityCollection<CTHDrugDayEntity> _cTHDrugDayCollection;
		private EntityCollection<CTHDrugSymptomEntity> _cTHDrugSymptomCollection;
		private EntityCollection<CTHPatientDrugEntity> _cTHPatientDrugCollection;
		private EntityCollection<CTHSymptomDrugEntity> _cTHSymptomDrugCollection;
		private EntityCollection<CTHDrugDayEntity> _cTHDrugDayCollectionViaCTHPatientDrug;
		private EntityCollection<CTHKimoSurveyEntity> _cTHKimoSurveyCollectionViaCTHPatientDrug;
		private EntityCollection<CTHProtocolCycleEntity> _cTHProtocolCycleCollectionViaCTHCycleDrug;
		private EntityCollection<CTHSymptomEntity> _cTHSymptomCollectionViaCTHDrugSymptom;
		private EntityCollection<CTHSymptomEntity> _cTHSymptomCollectionViaCTHSymptomDrug;
		private CTHChemotherapyProtocolEntity _cTHChemotherapyProtocolItem;
		private CTHDoseUnitEntity _cTHDoseUnitItem;
		private CTHSolutionEntity _cTHSolutionItem;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CTHDrugEntityStaticMetaData _staticMetaData = new CTHDrugEntityStaticMetaData();
		private static CTHDrugRelations _relationsFactory = new CTHDrugRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CTHChemotherapyProtocolItem</summary>
			public static readonly string CTHChemotherapyProtocolItem = "CTHChemotherapyProtocolItem";
			/// <summary>Member name CTHDoseUnitItem</summary>
			public static readonly string CTHDoseUnitItem = "CTHDoseUnitItem";
			/// <summary>Member name CTHSolutionItem</summary>
			public static readonly string CTHSolutionItem = "CTHSolutionItem";
			/// <summary>Member name CTHCycleDrugCollection</summary>
			public static readonly string CTHCycleDrugCollection = "CTHCycleDrugCollection";
			/// <summary>Member name CTHDrugAttachmentCollection</summary>
			public static readonly string CTHDrugAttachmentCollection = "CTHDrugAttachmentCollection";
			/// <summary>Member name CTHDrugDayCollection</summary>
			public static readonly string CTHDrugDayCollection = "CTHDrugDayCollection";
			/// <summary>Member name CTHDrugSymptomCollection</summary>
			public static readonly string CTHDrugSymptomCollection = "CTHDrugSymptomCollection";
			/// <summary>Member name CTHPatientDrugCollection</summary>
			public static readonly string CTHPatientDrugCollection = "CTHPatientDrugCollection";
			/// <summary>Member name CTHSymptomDrugCollection</summary>
			public static readonly string CTHSymptomDrugCollection = "CTHSymptomDrugCollection";
			/// <summary>Member name CTHDrugDayCollectionViaCTHPatientDrug</summary>
			public static readonly string CTHDrugDayCollectionViaCTHPatientDrug = "CTHDrugDayCollectionViaCTHPatientDrug";
			/// <summary>Member name CTHKimoSurveyCollectionViaCTHPatientDrug</summary>
			public static readonly string CTHKimoSurveyCollectionViaCTHPatientDrug = "CTHKimoSurveyCollectionViaCTHPatientDrug";
			/// <summary>Member name CTHProtocolCycleCollectionViaCTHCycleDrug</summary>
			public static readonly string CTHProtocolCycleCollectionViaCTHCycleDrug = "CTHProtocolCycleCollectionViaCTHCycleDrug";
			/// <summary>Member name CTHSymptomCollectionViaCTHDrugSymptom</summary>
			public static readonly string CTHSymptomCollectionViaCTHDrugSymptom = "CTHSymptomCollectionViaCTHDrugSymptom";
			/// <summary>Member name CTHSymptomCollectionViaCTHSymptomDrug</summary>
			public static readonly string CTHSymptomCollectionViaCTHSymptomDrug = "CTHSymptomCollectionViaCTHSymptomDrug";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CTHDrugEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CTHDrugEntityStaticMetaData()
			{
				SetEntityCoreInfo("CTHDrugEntity", InheritanceHierarchyType.None, false, (int)SStorm.CTH.DAL.EntityType.CTHDrugEntity, typeof(CTHDrugEntity), typeof(CTHDrugEntityFactory), false);
				AddNavigatorMetaData<CTHDrugEntity, EntityCollection<CTHCycleDrugEntity>>("CTHCycleDrugCollection", a => a._cTHCycleDrugCollection, (a, b) => a._cTHCycleDrugCollection = b, a => a.CTHCycleDrugCollection, () => new CTHDrugRelations().CTHCycleDrugEntityUsingDrugID, typeof(CTHCycleDrugEntity), (int)SStorm.CTH.DAL.EntityType.CTHCycleDrugEntity);
				AddNavigatorMetaData<CTHDrugEntity, EntityCollection<CTHDrugAttachmentEntity>>("CTHDrugAttachmentCollection", a => a._cTHDrugAttachmentCollection, (a, b) => a._cTHDrugAttachmentCollection = b, a => a.CTHDrugAttachmentCollection, () => new CTHDrugRelations().CTHDrugAttachmentEntityUsingDrugID, typeof(CTHDrugAttachmentEntity), (int)SStorm.CTH.DAL.EntityType.CTHDrugAttachmentEntity);
				AddNavigatorMetaData<CTHDrugEntity, EntityCollection<CTHDrugDayEntity>>("CTHDrugDayCollection", a => a._cTHDrugDayCollection, (a, b) => a._cTHDrugDayCollection = b, a => a.CTHDrugDayCollection, () => new CTHDrugRelations().CTHDrugDayEntityUsingDrugID, typeof(CTHDrugDayEntity), (int)SStorm.CTH.DAL.EntityType.CTHDrugDayEntity);
				AddNavigatorMetaData<CTHDrugEntity, EntityCollection<CTHDrugSymptomEntity>>("CTHDrugSymptomCollection", a => a._cTHDrugSymptomCollection, (a, b) => a._cTHDrugSymptomCollection = b, a => a.CTHDrugSymptomCollection, () => new CTHDrugRelations().CTHDrugSymptomEntityUsingDrugID, typeof(CTHDrugSymptomEntity), (int)SStorm.CTH.DAL.EntityType.CTHDrugSymptomEntity);
				AddNavigatorMetaData<CTHDrugEntity, EntityCollection<CTHPatientDrugEntity>>("CTHPatientDrugCollection", a => a._cTHPatientDrugCollection, (a, b) => a._cTHPatientDrugCollection = b, a => a.CTHPatientDrugCollection, () => new CTHDrugRelations().CTHPatientDrugEntityUsingDrugID, typeof(CTHPatientDrugEntity), (int)SStorm.CTH.DAL.EntityType.CTHPatientDrugEntity);
				AddNavigatorMetaData<CTHDrugEntity, EntityCollection<CTHSymptomDrugEntity>>("CTHSymptomDrugCollection", a => a._cTHSymptomDrugCollection, (a, b) => a._cTHSymptomDrugCollection = b, a => a.CTHSymptomDrugCollection, () => new CTHDrugRelations().CTHSymptomDrugEntityUsingDrugID, typeof(CTHSymptomDrugEntity), (int)SStorm.CTH.DAL.EntityType.CTHSymptomDrugEntity);
				AddNavigatorMetaData<CTHDrugEntity, CTHChemotherapyProtocolEntity>("CTHChemotherapyProtocolItem", "CTHDrugCollection", (a, b) => a._cTHChemotherapyProtocolItem = b, a => a._cTHChemotherapyProtocolItem, (a, b) => a.CTHChemotherapyProtocolItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHDrugRelations.CTHChemotherapyProtocolEntityUsingProtocolIDStatic, ()=>new CTHDrugRelations().CTHChemotherapyProtocolEntityUsingProtocolID, null, new int[] { (int)CTHDrugFieldIndex.ProtocolID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHChemotherapyProtocolEntity);
				AddNavigatorMetaData<CTHDrugEntity, CTHDoseUnitEntity>("CTHDoseUnitItem", "CTHDrugCollection", (a, b) => a._cTHDoseUnitItem = b, a => a._cTHDoseUnitItem, (a, b) => a.CTHDoseUnitItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHDrugRelations.CTHDoseUnitEntityUsingDoseUnitIDStatic, ()=>new CTHDrugRelations().CTHDoseUnitEntityUsingDoseUnitID, null, new int[] { (int)CTHDrugFieldIndex.DoseUnitID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHDoseUnitEntity);
				AddNavigatorMetaData<CTHDrugEntity, CTHSolutionEntity>("CTHSolutionItem", "CTHDrugCollection", (a, b) => a._cTHSolutionItem = b, a => a._cTHSolutionItem, (a, b) => a.CTHSolutionItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHDrugRelations.CTHSolutionEntityUsingSolutionIDStatic, ()=>new CTHDrugRelations().CTHSolutionEntityUsingSolutionID, null, new int[] { (int)CTHDrugFieldIndex.SolutionID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHSolutionEntity);
				AddNavigatorMetaData<CTHDrugEntity, EntityCollection<CTHDrugDayEntity>>("CTHDrugDayCollectionViaCTHPatientDrug", a => a._cTHDrugDayCollectionViaCTHPatientDrug, (a, b) => a._cTHDrugDayCollectionViaCTHPatientDrug = b, a => a.CTHDrugDayCollectionViaCTHPatientDrug, () => new CTHDrugRelations().CTHPatientDrugEntityUsingDrugID, () => new CTHPatientDrugRelations().CTHDrugDayEntityUsingDrugDayID, "CTHDrugEntity__", "CTHPatientDrug_", typeof(CTHDrugDayEntity), (int)SStorm.CTH.DAL.EntityType.CTHDrugDayEntity);
				AddNavigatorMetaData<CTHDrugEntity, EntityCollection<CTHKimoSurveyEntity>>("CTHKimoSurveyCollectionViaCTHPatientDrug", a => a._cTHKimoSurveyCollectionViaCTHPatientDrug, (a, b) => a._cTHKimoSurveyCollectionViaCTHPatientDrug = b, a => a.CTHKimoSurveyCollectionViaCTHPatientDrug, () => new CTHDrugRelations().CTHPatientDrugEntityUsingDrugID, () => new CTHPatientDrugRelations().CTHKimoSurveyEntityUsingKimoID, "CTHDrugEntity__", "CTHPatientDrug_", typeof(CTHKimoSurveyEntity), (int)SStorm.CTH.DAL.EntityType.CTHKimoSurveyEntity);
				AddNavigatorMetaData<CTHDrugEntity, EntityCollection<CTHProtocolCycleEntity>>("CTHProtocolCycleCollectionViaCTHCycleDrug", a => a._cTHProtocolCycleCollectionViaCTHCycleDrug, (a, b) => a._cTHProtocolCycleCollectionViaCTHCycleDrug = b, a => a.CTHProtocolCycleCollectionViaCTHCycleDrug, () => new CTHDrugRelations().CTHCycleDrugEntityUsingDrugID, () => new CTHCycleDrugRelations().CTHProtocolCycleEntityUsingCycleID, "CTHDrugEntity__", "CTHCycleDrug_", typeof(CTHProtocolCycleEntity), (int)SStorm.CTH.DAL.EntityType.CTHProtocolCycleEntity);
				AddNavigatorMetaData<CTHDrugEntity, EntityCollection<CTHSymptomEntity>>("CTHSymptomCollectionViaCTHDrugSymptom", a => a._cTHSymptomCollectionViaCTHDrugSymptom, (a, b) => a._cTHSymptomCollectionViaCTHDrugSymptom = b, a => a.CTHSymptomCollectionViaCTHDrugSymptom, () => new CTHDrugRelations().CTHDrugSymptomEntityUsingDrugID, () => new CTHDrugSymptomRelations().CTHSymptomEntityUsingSymtomID, "CTHDrugEntity__", "CTHDrugSymptom_", typeof(CTHSymptomEntity), (int)SStorm.CTH.DAL.EntityType.CTHSymptomEntity);
				AddNavigatorMetaData<CTHDrugEntity, EntityCollection<CTHSymptomEntity>>("CTHSymptomCollectionViaCTHSymptomDrug", a => a._cTHSymptomCollectionViaCTHSymptomDrug, (a, b) => a._cTHSymptomCollectionViaCTHSymptomDrug = b, a => a.CTHSymptomCollectionViaCTHSymptomDrug, () => new CTHDrugRelations().CTHSymptomDrugEntityUsingDrugID, () => new CTHSymptomDrugRelations().CTHSymptomEntityUsingSymptomId, "CTHDrugEntity__", "CTHSymptomDrug_", typeof(CTHSymptomEntity), (int)SStorm.CTH.DAL.EntityType.CTHSymptomEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CTHDrugEntity()
		{
		}

		/// <summary> CTor</summary>
		public CTHDrugEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CTHDrugEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CTHDrugEntity</param>
		public CTHDrugEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHDrug which data should be fetched into this CTHDrug object</param>
		public CTHDrugEntity(System.Int32 iD) : this(iD, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHDrug which data should be fetched into this CTHDrug object</param>
		/// <param name="validator">The custom validator object for this CTHDrugEntity</param>
		public CTHDrugEntity(System.Int32 iD, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ID = iD;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CTHDrugEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHCycleDrug' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHCycleDrugCollection() { return CreateRelationInfoForNavigator("CTHCycleDrugCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHDrugAttachment' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHDrugAttachmentCollection() { return CreateRelationInfoForNavigator("CTHDrugAttachmentCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHDrugDay' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHDrugDayCollection() { return CreateRelationInfoForNavigator("CTHDrugDayCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHDrugSymptom' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHDrugSymptomCollection() { return CreateRelationInfoForNavigator("CTHDrugSymptomCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHPatientDrug' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientDrugCollection() { return CreateRelationInfoForNavigator("CTHPatientDrugCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHSymptomDrug' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHSymptomDrugCollection() { return CreateRelationInfoForNavigator("CTHSymptomDrugCollection"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHDrugDay' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHDrugDayCollectionViaCTHPatientDrug() { return CreateRelationInfoForNavigator("CTHDrugDayCollectionViaCTHPatientDrug"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHKimoSurvey' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHKimoSurveyCollectionViaCTHPatientDrug() { return CreateRelationInfoForNavigator("CTHKimoSurveyCollectionViaCTHPatientDrug"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHProtocolCycle' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHProtocolCycleCollectionViaCTHCycleDrug() { return CreateRelationInfoForNavigator("CTHProtocolCycleCollectionViaCTHCycleDrug"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHSymptom' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHSymptomCollectionViaCTHDrugSymptom() { return CreateRelationInfoForNavigator("CTHSymptomCollectionViaCTHDrugSymptom"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CTHSymptom' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHSymptomCollectionViaCTHSymptomDrug() { return CreateRelationInfoForNavigator("CTHSymptomCollectionViaCTHSymptomDrug"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHChemotherapyProtocol' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHChemotherapyProtocolItem() { return CreateRelationInfoForNavigator("CTHChemotherapyProtocolItem"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHDoseUnit' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHDoseUnitItem() { return CreateRelationInfoForNavigator("CTHDoseUnitItem"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHSolution' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHSolutionItem() { return CreateRelationInfoForNavigator("CTHSolutionItem"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CTHDrugEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CTHDrugRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHCycleDrug' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHCycleDrugCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHCycleDrugCollection", CommonEntityBase.CreateEntityCollection<CTHCycleDrugEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHDrugAttachment' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHDrugAttachmentCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHDrugAttachmentCollection", CommonEntityBase.CreateEntityCollection<CTHDrugAttachmentEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHDrugDay' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHDrugDayCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHDrugDayCollection", CommonEntityBase.CreateEntityCollection<CTHDrugDayEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHDrugSymptom' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHDrugSymptomCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHDrugSymptomCollection", CommonEntityBase.CreateEntityCollection<CTHDrugSymptomEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatientDrug' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientDrugCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientDrugCollection", CommonEntityBase.CreateEntityCollection<CTHPatientDrugEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHSymptomDrug' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHSymptomDrugCollection { get { return _staticMetaData.GetPrefetchPathElement("CTHSymptomDrugCollection", CommonEntityBase.CreateEntityCollection<CTHSymptomDrugEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHDrugDay' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHDrugDayCollectionViaCTHPatientDrug { get { return _staticMetaData.GetPrefetchPathElement("CTHDrugDayCollectionViaCTHPatientDrug", CommonEntityBase.CreateEntityCollection<CTHDrugDayEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHKimoSurvey' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHKimoSurveyCollectionViaCTHPatientDrug { get { return _staticMetaData.GetPrefetchPathElement("CTHKimoSurveyCollectionViaCTHPatientDrug", CommonEntityBase.CreateEntityCollection<CTHKimoSurveyEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHProtocolCycle' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHProtocolCycleCollectionViaCTHCycleDrug { get { return _staticMetaData.GetPrefetchPathElement("CTHProtocolCycleCollectionViaCTHCycleDrug", CommonEntityBase.CreateEntityCollection<CTHProtocolCycleEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHSymptom' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHSymptomCollectionViaCTHDrugSymptom { get { return _staticMetaData.GetPrefetchPathElement("CTHSymptomCollectionViaCTHDrugSymptom", CommonEntityBase.CreateEntityCollection<CTHSymptomEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHSymptom' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHSymptomCollectionViaCTHSymptomDrug { get { return _staticMetaData.GetPrefetchPathElement("CTHSymptomCollectionViaCTHSymptomDrug", CommonEntityBase.CreateEntityCollection<CTHSymptomEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHChemotherapyProtocol' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHChemotherapyProtocolItem { get { return _staticMetaData.GetPrefetchPathElement("CTHChemotherapyProtocolItem", CommonEntityBase.CreateEntityCollection<CTHChemotherapyProtocolEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHDoseUnit' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHDoseUnitItem { get { return _staticMetaData.GetPrefetchPathElement("CTHDoseUnitItem", CommonEntityBase.CreateEntityCollection<CTHDoseUnitEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHSolution' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHSolutionItem { get { return _staticMetaData.GetPrefetchPathElement("CTHSolutionItem", CommonEntityBase.CreateEntityCollection<CTHSolutionEntity>()); } }

		/// <summary>The ArFinalConcentration property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."ArFinalConcentration".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArFinalConcentration
		{
			get { return (System.String)GetValue((int)CTHDrugFieldIndex.ArFinalConcentration, true); }
			set	{ SetValue((int)CTHDrugFieldIndex.ArFinalConcentration, value); }
		}

		/// <summary>The ArName property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."ArName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArName
		{
			get { return (System.String)GetValue((int)CTHDrugFieldIndex.ArName, true); }
			set	{ SetValue((int)CTHDrugFieldIndex.ArName, value); }
		}

		/// <summary>The ArSpecialAdminstrationNotes property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."ArSpecialAdminstrationNotes".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArSpecialAdminstrationNotes
		{
			get { return (System.String)GetValue((int)CTHDrugFieldIndex.ArSpecialAdminstrationNotes, true); }
			set	{ SetValue((int)CTHDrugFieldIndex.ArSpecialAdminstrationNotes, value); }
		}

		/// <summary>The ArTimeOfAdminstration property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."ArTimeOfAdminstration".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArTimeOfAdminstration
		{
			get { return (System.String)GetValue((int)CTHDrugFieldIndex.ArTimeOfAdminstration, true); }
			set	{ SetValue((int)CTHDrugFieldIndex.ArTimeOfAdminstration, value); }
		}

		/// <summary>The Dose property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."Dose".<br/>Table field type characteristics (type, precision, scale, length): Float, 38, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Double> Dose
		{
			get { return (Nullable<System.Double>)GetValue((int)CTHDrugFieldIndex.Dose, false); }
			set	{ SetValue((int)CTHDrugFieldIndex.Dose, value); }
		}

		/// <summary>The DosePerID property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."DosePerID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> DosePerID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHDrugFieldIndex.DosePerID, false); }
			set	{ SetValue((int)CTHDrugFieldIndex.DosePerID, value); }
		}

		/// <summary>The DoseUnitID property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."DoseUnitID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> DoseUnitID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHDrugFieldIndex.DoseUnitID, false); }
			set	{ SetValue((int)CTHDrugFieldIndex.DoseUnitID, value); }
		}

		/// <summary>The Duration property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."Duration".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> Duration
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHDrugFieldIndex.Duration, false); }
			set	{ SetValue((int)CTHDrugFieldIndex.Duration, value); }
		}

		/// <summary>The DurationUnitID property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."DurationUnitID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> DurationUnitID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHDrugFieldIndex.DurationUnitID, false); }
			set	{ SetValue((int)CTHDrugFieldIndex.DurationUnitID, value); }
		}

		/// <summary>The Every property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."Every".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> Every
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHDrugFieldIndex.Every, false); }
			set	{ SetValue((int)CTHDrugFieldIndex.Every, value); }
		}

		/// <summary>The EveryUnitID property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."EveryUnitID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> EveryUnitID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHDrugFieldIndex.EveryUnitID, false); }
			set	{ SetValue((int)CTHDrugFieldIndex.EveryUnitID, value); }
		}

		/// <summary>The FinalConcentration property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."FinalConcentration".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String FinalConcentration
		{
			get { return (System.String)GetValue((int)CTHDrugFieldIndex.FinalConcentration, true); }
			set	{ SetValue((int)CTHDrugFieldIndex.FinalConcentration, value); }
		}

		/// <summary>The FormAmount property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."FormAmount".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> FormAmount
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHDrugFieldIndex.FormAmount, false); }
			set	{ SetValue((int)CTHDrugFieldIndex.FormAmount, value); }
		}

		/// <summary>The FormID property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."FormID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> FormID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHDrugFieldIndex.FormID, false); }
			set	{ SetValue((int)CTHDrugFieldIndex.FormID, value); }
		}

		/// <summary>The ID property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."ID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ID
		{
			get { return (System.Int32)GetValue((int)CTHDrugFieldIndex.ID, true); }
			set { SetValue((int)CTHDrugFieldIndex.ID, value); }		}

		/// <summary>The Name property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."Name".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)CTHDrugFieldIndex.Name, true); }
			set	{ SetValue((int)CTHDrugFieldIndex.Name, value); }
		}

		/// <summary>The ProtocolID property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."ProtocolID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> ProtocolID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHDrugFieldIndex.ProtocolID, false); }
			set	{ SetValue((int)CTHDrugFieldIndex.ProtocolID, value); }
		}

		/// <summary>The RouteID property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."RouteID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> RouteID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHDrugFieldIndex.RouteID, false); }
			set	{ SetValue((int)CTHDrugFieldIndex.RouteID, value); }
		}

		/// <summary>The SolutionAmount property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."SolutionAmount".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> SolutionAmount
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHDrugFieldIndex.SolutionAmount, false); }
			set	{ SetValue((int)CTHDrugFieldIndex.SolutionAmount, value); }
		}

		/// <summary>The SolutionID property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."SolutionID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> SolutionID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHDrugFieldIndex.SolutionID, false); }
			set	{ SetValue((int)CTHDrugFieldIndex.SolutionID, value); }
		}

		/// <summary>The SpecialAdminstrationNotes property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."SpecialAdminstrationNotes".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String SpecialAdminstrationNotes
		{
			get { return (System.String)GetValue((int)CTHDrugFieldIndex.SpecialAdminstrationNotes, true); }
			set	{ SetValue((int)CTHDrugFieldIndex.SpecialAdminstrationNotes, value); }
		}

		/// <summary>The TimeOfAdminstration property of the Entity CTHDrug<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHDrug"."TimeOfAdminstration".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String TimeOfAdminstration
		{
			get { return (System.String)GetValue((int)CTHDrugFieldIndex.TimeOfAdminstration, true); }
			set	{ SetValue((int)CTHDrugFieldIndex.TimeOfAdminstration, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHCycleDrugEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHCycleDrugEntity))]
		public virtual EntityCollection<CTHCycleDrugEntity> CTHCycleDrugCollection { get { return GetOrCreateEntityCollection<CTHCycleDrugEntity, CTHCycleDrugEntityFactory>("CTHDrugItem", true, false, ref _cTHCycleDrugCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHDrugAttachmentEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHDrugAttachmentEntity))]
		public virtual EntityCollection<CTHDrugAttachmentEntity> CTHDrugAttachmentCollection { get { return GetOrCreateEntityCollection<CTHDrugAttachmentEntity, CTHDrugAttachmentEntityFactory>("CTHDrugItem", true, false, ref _cTHDrugAttachmentCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHDrugDayEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHDrugDayEntity))]
		public virtual EntityCollection<CTHDrugDayEntity> CTHDrugDayCollection { get { return GetOrCreateEntityCollection<CTHDrugDayEntity, CTHDrugDayEntityFactory>("CTHDrugItem", true, false, ref _cTHDrugDayCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHDrugSymptomEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHDrugSymptomEntity))]
		public virtual EntityCollection<CTHDrugSymptomEntity> CTHDrugSymptomCollection { get { return GetOrCreateEntityCollection<CTHDrugSymptomEntity, CTHDrugSymptomEntityFactory>("CTHDrugItem", true, false, ref _cTHDrugSymptomCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHPatientDrugEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHPatientDrugEntity))]
		public virtual EntityCollection<CTHPatientDrugEntity> CTHPatientDrugCollection { get { return GetOrCreateEntityCollection<CTHPatientDrugEntity, CTHPatientDrugEntityFactory>("CTHDrugItem", true, false, ref _cTHPatientDrugCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHSymptomDrugEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHSymptomDrugEntity))]
		public virtual EntityCollection<CTHSymptomDrugEntity> CTHSymptomDrugCollection { get { return GetOrCreateEntityCollection<CTHSymptomDrugEntity, CTHSymptomDrugEntityFactory>("CTHDrugItem", true, false, ref _cTHSymptomDrugCollection); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHDrugDayEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHDrugDayEntity))]
		public virtual EntityCollection<CTHDrugDayEntity> CTHDrugDayCollectionViaCTHPatientDrug { get { return GetOrCreateEntityCollection<CTHDrugDayEntity, CTHDrugDayEntityFactory>("CTHDrugCollectionViaCTHPatientDrug", false, true, ref _cTHDrugDayCollectionViaCTHPatientDrug); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHKimoSurveyEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHKimoSurveyEntity))]
		public virtual EntityCollection<CTHKimoSurveyEntity> CTHKimoSurveyCollectionViaCTHPatientDrug { get { return GetOrCreateEntityCollection<CTHKimoSurveyEntity, CTHKimoSurveyEntityFactory>("CTHDrugCollectionViaCTHPatientDrug", false, true, ref _cTHKimoSurveyCollectionViaCTHPatientDrug); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHProtocolCycleEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHProtocolCycleEntity))]
		public virtual EntityCollection<CTHProtocolCycleEntity> CTHProtocolCycleCollectionViaCTHCycleDrug { get { return GetOrCreateEntityCollection<CTHProtocolCycleEntity, CTHProtocolCycleEntityFactory>("CTHDrugCollectionViaCTHCycleDrug", false, true, ref _cTHProtocolCycleCollectionViaCTHCycleDrug); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHSymptomEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHSymptomEntity))]
		public virtual EntityCollection<CTHSymptomEntity> CTHSymptomCollectionViaCTHDrugSymptom { get { return GetOrCreateEntityCollection<CTHSymptomEntity, CTHSymptomEntityFactory>("CTHDrugCollectionViaCTHDrugSymptom", false, true, ref _cTHSymptomCollectionViaCTHDrugSymptom); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CTHSymptomEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CTHSymptomEntity))]
		public virtual EntityCollection<CTHSymptomEntity> CTHSymptomCollectionViaCTHSymptomDrug { get { return GetOrCreateEntityCollection<CTHSymptomEntity, CTHSymptomEntityFactory>("CTHDrugCollectionViaCTHSymptomDrug", false, true, ref _cTHSymptomCollectionViaCTHSymptomDrug); } }

		/// <summary>Gets / sets related entity of type 'CTHChemotherapyProtocolEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHChemotherapyProtocolEntity CTHChemotherapyProtocolItem
		{
			get { return _cTHChemotherapyProtocolItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHChemotherapyProtocolItem"); }
		}

		/// <summary>Gets / sets related entity of type 'CTHDoseUnitEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHDoseUnitEntity CTHDoseUnitItem
		{
			get { return _cTHDoseUnitItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHDoseUnitItem"); }
		}

		/// <summary>Gets / sets related entity of type 'CTHSolutionEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHSolutionEntity CTHSolutionItem
		{
			get { return _cTHSolutionItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHSolutionItem"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace SStorm.CTH.DAL
{
	public enum CTHDrugFieldIndex
	{
		///<summary>ArFinalConcentration. </summary>
		ArFinalConcentration,
		///<summary>ArName. </summary>
		ArName,
		///<summary>ArSpecialAdminstrationNotes. </summary>
		ArSpecialAdminstrationNotes,
		///<summary>ArTimeOfAdminstration. </summary>
		ArTimeOfAdminstration,
		///<summary>Dose. </summary>
		Dose,
		///<summary>DosePerID. </summary>
		DosePerID,
		///<summary>DoseUnitID. </summary>
		DoseUnitID,
		///<summary>Duration. </summary>
		Duration,
		///<summary>DurationUnitID. </summary>
		DurationUnitID,
		///<summary>Every. </summary>
		Every,
		///<summary>EveryUnitID. </summary>
		EveryUnitID,
		///<summary>FinalConcentration. </summary>
		FinalConcentration,
		///<summary>FormAmount. </summary>
		FormAmount,
		///<summary>FormID. </summary>
		FormID,
		///<summary>ID. </summary>
		ID,
		///<summary>Name. </summary>
		Name,
		///<summary>ProtocolID. </summary>
		ProtocolID,
		///<summary>RouteID. </summary>
		RouteID,
		///<summary>SolutionAmount. </summary>
		SolutionAmount,
		///<summary>SolutionID. </summary>
		SolutionID,
		///<summary>SpecialAdminstrationNotes. </summary>
		SpecialAdminstrationNotes,
		///<summary>TimeOfAdminstration. </summary>
		TimeOfAdminstration,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SStorm.CTH.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CTHDrug. </summary>
	public partial class CTHDrugRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between CTHDrugEntity and CTHCycleDrugEntity over the 1:n relation they have, using the relation between the fields: CTHDrug.ID - CTHCycleDrug.DrugID</summary>
		public virtual IEntityRelation CTHCycleDrugEntityUsingDrugID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHCycleDrugCollection", true, new[] { CTHDrugFields.ID, CTHCycleDrugFields.DrugID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHDrugEntity and CTHDrugAttachmentEntity over the 1:n relation they have, using the relation between the fields: CTHDrug.ID - CTHDrugAttachment.DrugID</summary>
		public virtual IEntityRelation CTHDrugAttachmentEntityUsingDrugID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHDrugAttachmentCollection", true, new[] { CTHDrugFields.ID, CTHDrugAttachmentFields.DrugID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHDrugEntity and CTHDrugDayEntity over the 1:n relation they have, using the relation between the fields: CTHDrug.ID - CTHDrugDay.DrugID</summary>
		public virtual IEntityRelation CTHDrugDayEntityUsingDrugID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHDrugDayCollection", true, new[] { CTHDrugFields.ID, CTHDrugDayFields.DrugID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHDrugEntity and CTHDrugSymptomEntity over the 1:n relation they have, using the relation between the fields: CTHDrug.ID - CTHDrugSymptom.DrugID</summary>
		public virtual IEntityRelation CTHDrugSymptomEntityUsingDrugID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHDrugSymptomCollection", true, new[] { CTHDrugFields.ID, CTHDrugSymptomFields.DrugID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHDrugEntity and CTHPatientDrugEntity over the 1:n relation they have, using the relation between the fields: CTHDrug.ID - CTHPatientDrug.DrugID</summary>
		public virtual IEntityRelation CTHPatientDrugEntityUsingDrugID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHPatientDrugCollection", true, new[] { CTHDrugFields.ID, CTHPatientDrugFields.DrugID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHDrugEntity and CTHSymptomDrugEntity over the 1:n relation they have, using the relation between the fields: CTHDrug.ID - CTHSymptomDrug.DrugID</summary>
		public virtual IEntityRelation CTHSymptomDrugEntityUsingDrugID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CTHSymptomDrugCollection", true, new[] { CTHDrugFields.ID, CTHSymptomDrugFields.DrugID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHDrugEntity and CTHChemotherapyProtocolEntity over the m:1 relation they have, using the relation between the fields: CTHDrug.ProtocolID - CTHChemotherapyProtocol.ID</summary>
		public virtual IEntityRelation CTHChemotherapyProtocolEntityUsingProtocolID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHChemotherapyProtocolItem", false, new[] { CTHChemotherapyProtocolFields.ID, CTHDrugFields.ProtocolID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHDrugEntity and CTHDoseUnitEntity over the m:1 relation they have, using the relation between the fields: CTHDrug.DoseUnitID - CTHDoseUnit.ID</summary>
		public virtual IEntityRelation CTHDoseUnitEntityUsingDoseUnitID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHDoseUnitItem", false, new[] { CTHDoseUnitFields.ID, CTHDrugFields.DoseUnitID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHDrugEntity and CTHSolutionEntity over the m:1 relation they have, using the relation between the fields: CTHDrug.SolutionID - CTHSolution.ID</summary>
		public virtual IEntityRelation CTHSolutionEntityUsingSolutionID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHSolutionItem", false, new[] { CTHSolutionFields.ID, CTHDrugFields.SolutionID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCTHDrugRelations
	{
		internal static readonly IEntityRelation CTHCycleDrugEntityUsingDrugIDStatic = new CTHDrugRelations().CTHCycleDrugEntityUsingDrugID;
		internal static readonly IEntityRelation CTHDrugAttachmentEntityUsingDrugIDStatic = new CTHDrugRelations().CTHDrugAttachmentEntityUsingDrugID;
		internal static readonly IEntityRelation CTHDrugDayEntityUsingDrugIDStatic = new CTHDrugRelations().CTHDrugDayEntityUsingDrugID;
		internal static readonly IEntityRelation CTHDrugSymptomEntityUsingDrugIDStatic = new CTHDrugRelations().CTHDrugSymptomEntityUsingDrugID;
		internal static readonly IEntityRelation CTHPatientDrugEntityUsingDrugIDStatic = new CTHDrugRelations().CTHPatientDrugEntityUsingDrugID;
		internal static readonly IEntityRelation CTHSymptomDrugEntityUsingDrugIDStatic = new CTHDrugRelations().CTHSymptomDrugEntityUsingDrugID;
		internal static readonly IEntityRelation CTHChemotherapyProtocolEntityUsingProtocolIDStatic = new CTHDrugRelations().CTHChemotherapyProtocolEntityUsingProtocolID;
		internal static readonly IEntityRelation CTHDoseUnitEntityUsingDoseUnitIDStatic = new CTHDrugRelations().CTHDoseUnitEntityUsingDoseUnitID;
		internal static readonly IEntityRelation CTHSolutionEntityUsingSolutionIDStatic = new CTHDrugRelations().CTHSolutionEntityUsingSolutionID;

		/// <summary>CTor</summary>
		static StaticCTHDrugRelations() { }
	}
}
