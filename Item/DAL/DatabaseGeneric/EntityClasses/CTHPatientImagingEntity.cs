//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.6.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SStorm.CTH.DAL.HelperClasses;
using SStorm.CTH.DAL.FactoryClasses;
using SStorm.CTH.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SStorm.CTH.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'CTHPatientImaging'.<br/><br/></summary>
	[Serializable]
	public partial class CTHPatientImagingEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private CTHImagingEntity _cTHImagingItem;
		private CTHPatientClinicalDataEntity _cTHPatientClinicalDataItem;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CTHPatientImagingEntityStaticMetaData _staticMetaData = new CTHPatientImagingEntityStaticMetaData();
		private static CTHPatientImagingRelations _relationsFactory = new CTHPatientImagingRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CTHImagingItem</summary>
			public static readonly string CTHImagingItem = "CTHImagingItem";
			/// <summary>Member name CTHPatientClinicalDataItem</summary>
			public static readonly string CTHPatientClinicalDataItem = "CTHPatientClinicalDataItem";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CTHPatientImagingEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CTHPatientImagingEntityStaticMetaData()
			{
				SetEntityCoreInfo("CTHPatientImagingEntity", InheritanceHierarchyType.None, false, (int)SStorm.CTH.DAL.EntityType.CTHPatientImagingEntity, typeof(CTHPatientImagingEntity), typeof(CTHPatientImagingEntityFactory), false);
				AddNavigatorMetaData<CTHPatientImagingEntity, CTHImagingEntity>("CTHImagingItem", "CTHPatientImagingCollection", (a, b) => a._cTHImagingItem = b, a => a._cTHImagingItem, (a, b) => a.CTHImagingItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHPatientImagingRelations.CTHImagingEntityUsingImagingTypeIDStatic, ()=>new CTHPatientImagingRelations().CTHImagingEntityUsingImagingTypeID, null, new int[] { (int)CTHPatientImagingFieldIndex.ImagingTypeID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHImagingEntity);
				AddNavigatorMetaData<CTHPatientImagingEntity, CTHPatientClinicalDataEntity>("CTHPatientClinicalDataItem", "CTHPatientImagingCollection", (a, b) => a._cTHPatientClinicalDataItem = b, a => a._cTHPatientClinicalDataItem, (a, b) => a.CTHPatientClinicalDataItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHPatientImagingRelations.CTHPatientClinicalDataEntityUsingPatientClinicalDataIDStatic, ()=>new CTHPatientImagingRelations().CTHPatientClinicalDataEntityUsingPatientClinicalDataID, null, new int[] { (int)CTHPatientImagingFieldIndex.PatientClinicalDataID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHPatientClinicalDataEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CTHPatientImagingEntity()
		{
		}

		/// <summary> CTor</summary>
		public CTHPatientImagingEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CTHPatientImagingEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CTHPatientImagingEntity</param>
		public CTHPatientImagingEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHPatientImaging which data should be fetched into this CTHPatientImaging object</param>
		public CTHPatientImagingEntity(System.Int32 iD) : this(iD, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHPatientImaging which data should be fetched into this CTHPatientImaging object</param>
		/// <param name="validator">The custom validator object for this CTHPatientImagingEntity</param>
		public CTHPatientImagingEntity(System.Int32 iD, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ID = iD;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CTHPatientImagingEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHImaging' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHImagingItem() { return CreateRelationInfoForNavigator("CTHImagingItem"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHPatientClinicalData' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientClinicalDataItem() { return CreateRelationInfoForNavigator("CTHPatientClinicalDataItem"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CTHPatientImagingEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CTHPatientImagingRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHImaging' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHImagingItem { get { return _staticMetaData.GetPrefetchPathElement("CTHImagingItem", CommonEntityBase.CreateEntityCollection<CTHImagingEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatientClinicalData' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientClinicalDataItem { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientClinicalDataItem", CommonEntityBase.CreateEntityCollection<CTHPatientClinicalDataEntity>()); } }

		/// <summary>The ArTextResult property of the Entity CTHPatientImaging<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientImaging"."ArTextResult".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArTextResult
		{
			get { return (System.String)GetValue((int)CTHPatientImagingFieldIndex.ArTextResult, true); }
			set	{ SetValue((int)CTHPatientImagingFieldIndex.ArTextResult, value); }
		}

		/// <summary>The AttachmentResult property of the Entity CTHPatientImaging<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientImaging"."AttachmentResult".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String AttachmentResult
		{
			get { return (System.String)GetValue((int)CTHPatientImagingFieldIndex.AttachmentResult, true); }
			set	{ SetValue((int)CTHPatientImagingFieldIndex.AttachmentResult, value); }
		}

		/// <summary>The ID property of the Entity CTHPatientImaging<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientImaging"."ID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ID
		{
			get { return (System.Int32)GetValue((int)CTHPatientImagingFieldIndex.ID, true); }
			set { SetValue((int)CTHPatientImagingFieldIndex.ID, value); }		}

		/// <summary>The Image property of the Entity CTHPatientImaging<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientImaging"."Image".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Image
		{
			get { return (System.String)GetValue((int)CTHPatientImagingFieldIndex.Image, true); }
			set	{ SetValue((int)CTHPatientImagingFieldIndex.Image, value); }
		}

		/// <summary>The ImagingTypeID property of the Entity CTHPatientImaging<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientImaging"."ImagingTypeID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> ImagingTypeID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHPatientImagingFieldIndex.ImagingTypeID, false); }
			set	{ SetValue((int)CTHPatientImagingFieldIndex.ImagingTypeID, value); }
		}

		/// <summary>The PatientClinicalDataID property of the Entity CTHPatientImaging<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientImaging"."PatientClinicalDataID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> PatientClinicalDataID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHPatientImagingFieldIndex.PatientClinicalDataID, false); }
			set	{ SetValue((int)CTHPatientImagingFieldIndex.PatientClinicalDataID, value); }
		}

		/// <summary>The TextResult property of the Entity CTHPatientImaging<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientImaging"."TextResult".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String TextResult
		{
			get { return (System.String)GetValue((int)CTHPatientImagingFieldIndex.TextResult, true); }
			set	{ SetValue((int)CTHPatientImagingFieldIndex.TextResult, value); }
		}

		/// <summary>Gets / sets related entity of type 'CTHImagingEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHImagingEntity CTHImagingItem
		{
			get { return _cTHImagingItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHImagingItem"); }
		}

		/// <summary>Gets / sets related entity of type 'CTHPatientClinicalDataEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHPatientClinicalDataEntity CTHPatientClinicalDataItem
		{
			get { return _cTHPatientClinicalDataItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHPatientClinicalDataItem"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace SStorm.CTH.DAL
{
	public enum CTHPatientImagingFieldIndex
	{
		///<summary>ArTextResult. </summary>
		ArTextResult,
		///<summary>AttachmentResult. </summary>
		AttachmentResult,
		///<summary>ID. </summary>
		ID,
		///<summary>Image. </summary>
		Image,
		///<summary>ImagingTypeID. </summary>
		ImagingTypeID,
		///<summary>PatientClinicalDataID. </summary>
		PatientClinicalDataID,
		///<summary>TextResult. </summary>
		TextResult,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SStorm.CTH.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CTHPatientImaging. </summary>
	public partial class CTHPatientImagingRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between CTHPatientImagingEntity and CTHImagingEntity over the m:1 relation they have, using the relation between the fields: CTHPatientImaging.ImagingTypeID - CTHImaging.ID</summary>
		public virtual IEntityRelation CTHImagingEntityUsingImagingTypeID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHImagingItem", false, new[] { CTHImagingFields.ID, CTHPatientImagingFields.ImagingTypeID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHPatientImagingEntity and CTHPatientClinicalDataEntity over the m:1 relation they have, using the relation between the fields: CTHPatientImaging.PatientClinicalDataID - CTHPatientClinicalData.ID</summary>
		public virtual IEntityRelation CTHPatientClinicalDataEntityUsingPatientClinicalDataID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHPatientClinicalDataItem", false, new[] { CTHPatientClinicalDataFields.ID, CTHPatientImagingFields.PatientClinicalDataID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCTHPatientImagingRelations
	{
		internal static readonly IEntityRelation CTHImagingEntityUsingImagingTypeIDStatic = new CTHPatientImagingRelations().CTHImagingEntityUsingImagingTypeID;
		internal static readonly IEntityRelation CTHPatientClinicalDataEntityUsingPatientClinicalDataIDStatic = new CTHPatientImagingRelations().CTHPatientClinicalDataEntityUsingPatientClinicalDataID;

		/// <summary>CTor</summary>
		static StaticCTHPatientImagingRelations() { }
	}
}
