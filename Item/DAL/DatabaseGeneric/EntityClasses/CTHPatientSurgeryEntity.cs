//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.6.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SStorm.CTH.DAL.HelperClasses;
using SStorm.CTH.DAL.FactoryClasses;
using SStorm.CTH.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SStorm.CTH.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'CTHPatientSurgery'.<br/><br/></summary>
	[Serializable]
	public partial class CTHPatientSurgeryEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private CTHPatientClinicalDataEntity _cTHPatientClinicalDataItem;
		private CTHSurgeryTypeEntity _cTHSurgeryTypeItem;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CTHPatientSurgeryEntityStaticMetaData _staticMetaData = new CTHPatientSurgeryEntityStaticMetaData();
		private static CTHPatientSurgeryRelations _relationsFactory = new CTHPatientSurgeryRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CTHPatientClinicalDataItem</summary>
			public static readonly string CTHPatientClinicalDataItem = "CTHPatientClinicalDataItem";
			/// <summary>Member name CTHSurgeryTypeItem</summary>
			public static readonly string CTHSurgeryTypeItem = "CTHSurgeryTypeItem";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CTHPatientSurgeryEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CTHPatientSurgeryEntityStaticMetaData()
			{
				SetEntityCoreInfo("CTHPatientSurgeryEntity", InheritanceHierarchyType.None, false, (int)SStorm.CTH.DAL.EntityType.CTHPatientSurgeryEntity, typeof(CTHPatientSurgeryEntity), typeof(CTHPatientSurgeryEntityFactory), false);
				AddNavigatorMetaData<CTHPatientSurgeryEntity, CTHPatientClinicalDataEntity>("CTHPatientClinicalDataItem", "CTHPatientSurgeryCollection", (a, b) => a._cTHPatientClinicalDataItem = b, a => a._cTHPatientClinicalDataItem, (a, b) => a.CTHPatientClinicalDataItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHPatientSurgeryRelations.CTHPatientClinicalDataEntityUsingPatientClinicalDataIDStatic, ()=>new CTHPatientSurgeryRelations().CTHPatientClinicalDataEntityUsingPatientClinicalDataID, null, new int[] { (int)CTHPatientSurgeryFieldIndex.PatientClinicalDataID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHPatientClinicalDataEntity);
				AddNavigatorMetaData<CTHPatientSurgeryEntity, CTHSurgeryTypeEntity>("CTHSurgeryTypeItem", "CTHPatientSurgeryCollection", (a, b) => a._cTHSurgeryTypeItem = b, a => a._cTHSurgeryTypeItem, (a, b) => a.CTHSurgeryTypeItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHPatientSurgeryRelations.CTHSurgeryTypeEntityUsingSurgeryTypeIdStatic, ()=>new CTHPatientSurgeryRelations().CTHSurgeryTypeEntityUsingSurgeryTypeId, null, new int[] { (int)CTHPatientSurgeryFieldIndex.SurgeryTypeId }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHSurgeryTypeEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CTHPatientSurgeryEntity()
		{
		}

		/// <summary> CTor</summary>
		public CTHPatientSurgeryEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CTHPatientSurgeryEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CTHPatientSurgeryEntity</param>
		public CTHPatientSurgeryEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHPatientSurgery which data should be fetched into this CTHPatientSurgery object</param>
		public CTHPatientSurgeryEntity(System.Int32 iD) : this(iD, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHPatientSurgery which data should be fetched into this CTHPatientSurgery object</param>
		/// <param name="validator">The custom validator object for this CTHPatientSurgeryEntity</param>
		public CTHPatientSurgeryEntity(System.Int32 iD, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ID = iD;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CTHPatientSurgeryEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHPatientClinicalData' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientClinicalDataItem() { return CreateRelationInfoForNavigator("CTHPatientClinicalDataItem"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHSurgeryType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHSurgeryTypeItem() { return CreateRelationInfoForNavigator("CTHSurgeryTypeItem"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CTHPatientSurgeryEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CTHPatientSurgeryRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatientClinicalData' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientClinicalDataItem { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientClinicalDataItem", CommonEntityBase.CreateEntityCollection<CTHPatientClinicalDataEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHSurgeryType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHSurgeryTypeItem { get { return _staticMetaData.GetPrefetchPathElement("CTHSurgeryTypeItem", CommonEntityBase.CreateEntityCollection<CTHSurgeryTypeEntity>()); } }

		/// <summary>The ID property of the Entity CTHPatientSurgery<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientSurgery"."ID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ID
		{
			get { return (System.Int32)GetValue((int)CTHPatientSurgeryFieldIndex.ID, true); }
			set { SetValue((int)CTHPatientSurgeryFieldIndex.ID, value); }		}

		/// <summary>The PatientClinicalDataID property of the Entity CTHPatientSurgery<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientSurgery"."PatientClinicalDataID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> PatientClinicalDataID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHPatientSurgeryFieldIndex.PatientClinicalDataID, false); }
			set	{ SetValue((int)CTHPatientSurgeryFieldIndex.PatientClinicalDataID, value); }
		}

		/// <summary>The SurgeryDate property of the Entity CTHPatientSurgery<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientSurgery"."SurgeryDate".<br/>Table field type characteristics (type, precision, scale, length): Date, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> SurgeryDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)CTHPatientSurgeryFieldIndex.SurgeryDate, false); }
			set	{ SetValue((int)CTHPatientSurgeryFieldIndex.SurgeryDate, value); }
		}

		/// <summary>The SurgeryTypeId property of the Entity CTHPatientSurgery<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHPatientSurgery"."SurgeryTypeId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> SurgeryTypeId
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHPatientSurgeryFieldIndex.SurgeryTypeId, false); }
			set	{ SetValue((int)CTHPatientSurgeryFieldIndex.SurgeryTypeId, value); }
		}

		/// <summary>Gets / sets related entity of type 'CTHPatientClinicalDataEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHPatientClinicalDataEntity CTHPatientClinicalDataItem
		{
			get { return _cTHPatientClinicalDataItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHPatientClinicalDataItem"); }
		}

		/// <summary>Gets / sets related entity of type 'CTHSurgeryTypeEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHSurgeryTypeEntity CTHSurgeryTypeItem
		{
			get { return _cTHSurgeryTypeItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHSurgeryTypeItem"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace SStorm.CTH.DAL
{
	public enum CTHPatientSurgeryFieldIndex
	{
		///<summary>ID. </summary>
		ID,
		///<summary>PatientClinicalDataID. </summary>
		PatientClinicalDataID,
		///<summary>SurgeryDate. </summary>
		SurgeryDate,
		///<summary>SurgeryTypeId. </summary>
		SurgeryTypeId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SStorm.CTH.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CTHPatientSurgery. </summary>
	public partial class CTHPatientSurgeryRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between CTHPatientSurgeryEntity and CTHPatientClinicalDataEntity over the m:1 relation they have, using the relation between the fields: CTHPatientSurgery.PatientClinicalDataID - CTHPatientClinicalData.ID</summary>
		public virtual IEntityRelation CTHPatientClinicalDataEntityUsingPatientClinicalDataID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHPatientClinicalDataItem", false, new[] { CTHPatientClinicalDataFields.ID, CTHPatientSurgeryFields.PatientClinicalDataID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHPatientSurgeryEntity and CTHSurgeryTypeEntity over the m:1 relation they have, using the relation between the fields: CTHPatientSurgery.SurgeryTypeId - CTHSurgeryType.ID</summary>
		public virtual IEntityRelation CTHSurgeryTypeEntityUsingSurgeryTypeId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHSurgeryTypeItem", false, new[] { CTHSurgeryTypeFields.ID, CTHPatientSurgeryFields.SurgeryTypeId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCTHPatientSurgeryRelations
	{
		internal static readonly IEntityRelation CTHPatientClinicalDataEntityUsingPatientClinicalDataIDStatic = new CTHPatientSurgeryRelations().CTHPatientClinicalDataEntityUsingPatientClinicalDataID;
		internal static readonly IEntityRelation CTHSurgeryTypeEntityUsingSurgeryTypeIdStatic = new CTHPatientSurgeryRelations().CTHSurgeryTypeEntityUsingSurgeryTypeId;

		/// <summary>CTor</summary>
		static StaticCTHPatientSurgeryRelations() { }
	}
}
