//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.6.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SStorm.CTH.DAL.HelperClasses;
using SStorm.CTH.DAL.FactoryClasses;
using SStorm.CTH.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SStorm.CTH.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'CTHNotification'.<br/><br/></summary>
	[Serializable]
	public partial class CTHNotificationEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private CTHDoctorEntity _cTHDoctorItem;
		private CTHKimoSurveyEntity _cTHKimoSurveyItem;
		private CTHPatientEntity _cTHPatientItem;
		private CTHPatientSymptomEntity _cTHPatientSymptomItem;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CTHNotificationEntityStaticMetaData _staticMetaData = new CTHNotificationEntityStaticMetaData();
		private static CTHNotificationRelations _relationsFactory = new CTHNotificationRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CTHDoctorItem</summary>
			public static readonly string CTHDoctorItem = "CTHDoctorItem";
			/// <summary>Member name CTHKimoSurveyItem</summary>
			public static readonly string CTHKimoSurveyItem = "CTHKimoSurveyItem";
			/// <summary>Member name CTHPatientItem</summary>
			public static readonly string CTHPatientItem = "CTHPatientItem";
			/// <summary>Member name CTHPatientSymptomItem</summary>
			public static readonly string CTHPatientSymptomItem = "CTHPatientSymptomItem";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CTHNotificationEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CTHNotificationEntityStaticMetaData()
			{
				SetEntityCoreInfo("CTHNotificationEntity", InheritanceHierarchyType.None, false, (int)SStorm.CTH.DAL.EntityType.CTHNotificationEntity, typeof(CTHNotificationEntity), typeof(CTHNotificationEntityFactory), false);
				AddNavigatorMetaData<CTHNotificationEntity, CTHDoctorEntity>("CTHDoctorItem", "CTHNotificationCollection", (a, b) => a._cTHDoctorItem = b, a => a._cTHDoctorItem, (a, b) => a.CTHDoctorItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHNotificationRelations.CTHDoctorEntityUsingDoctorIDStatic, ()=>new CTHNotificationRelations().CTHDoctorEntityUsingDoctorID, null, new int[] { (int)CTHNotificationFieldIndex.DoctorID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHDoctorEntity);
				AddNavigatorMetaData<CTHNotificationEntity, CTHKimoSurveyEntity>("CTHKimoSurveyItem", "CTHNotificationCollection", (a, b) => a._cTHKimoSurveyItem = b, a => a._cTHKimoSurveyItem, (a, b) => a.CTHKimoSurveyItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHNotificationRelations.CTHKimoSurveyEntityUsingKimoIDStatic, ()=>new CTHNotificationRelations().CTHKimoSurveyEntityUsingKimoID, null, new int[] { (int)CTHNotificationFieldIndex.KimoID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHKimoSurveyEntity);
				AddNavigatorMetaData<CTHNotificationEntity, CTHPatientEntity>("CTHPatientItem", "CTHNotificationCollection", (a, b) => a._cTHPatientItem = b, a => a._cTHPatientItem, (a, b) => a.CTHPatientItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHNotificationRelations.CTHPatientEntityUsingPatientIDStatic, ()=>new CTHNotificationRelations().CTHPatientEntityUsingPatientID, null, new int[] { (int)CTHNotificationFieldIndex.PatientID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHPatientEntity);
				AddNavigatorMetaData<CTHNotificationEntity, CTHPatientSymptomEntity>("CTHPatientSymptomItem", "CTHNotificationCollection", (a, b) => a._cTHPatientSymptomItem = b, a => a._cTHPatientSymptomItem, (a, b) => a.CTHPatientSymptomItem = b, SStorm.CTH.DAL.RelationClasses.StaticCTHNotificationRelations.CTHPatientSymptomEntityUsingPatientSymptomIDStatic, ()=>new CTHNotificationRelations().CTHPatientSymptomEntityUsingPatientSymptomID, null, new int[] { (int)CTHNotificationFieldIndex.PatientSymptomID }, null, true, (int)SStorm.CTH.DAL.EntityType.CTHPatientSymptomEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CTHNotificationEntity()
		{
		}

		/// <summary> CTor</summary>
		public CTHNotificationEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CTHNotificationEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CTHNotificationEntity</param>
		public CTHNotificationEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHNotification which data should be fetched into this CTHNotification object</param>
		public CTHNotificationEntity(System.Int32 iD) : this(iD, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="iD">PK value for CTHNotification which data should be fetched into this CTHNotification object</param>
		/// <param name="validator">The custom validator object for this CTHNotificationEntity</param>
		public CTHNotificationEntity(System.Int32 iD, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ID = iD;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CTHNotificationEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHDoctor' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHDoctorItem() { return CreateRelationInfoForNavigator("CTHDoctorItem"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHKimoSurvey' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHKimoSurveyItem() { return CreateRelationInfoForNavigator("CTHKimoSurveyItem"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHPatient' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientItem() { return CreateRelationInfoForNavigator("CTHPatientItem"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CTHPatientSymptom' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCTHPatientSymptomItem() { return CreateRelationInfoForNavigator("CTHPatientSymptomItem"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CTHNotificationEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CTHNotificationRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHDoctor' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHDoctorItem { get { return _staticMetaData.GetPrefetchPathElement("CTHDoctorItem", CommonEntityBase.CreateEntityCollection<CTHDoctorEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHKimoSurvey' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHKimoSurveyItem { get { return _staticMetaData.GetPrefetchPathElement("CTHKimoSurveyItem", CommonEntityBase.CreateEntityCollection<CTHKimoSurveyEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatient' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientItem { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientItem", CommonEntityBase.CreateEntityCollection<CTHPatientEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CTHPatientSymptom' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCTHPatientSymptomItem { get { return _staticMetaData.GetPrefetchPathElement("CTHPatientSymptomItem", CommonEntityBase.CreateEntityCollection<CTHPatientSymptomEntity>()); } }

		/// <summary>The ArMessage property of the Entity CTHNotification<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHNotification"."ArMessage".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ArMessage
		{
			get { return (System.String)GetValue((int)CTHNotificationFieldIndex.ArMessage, true); }
			set	{ SetValue((int)CTHNotificationFieldIndex.ArMessage, value); }
		}

		/// <summary>The DoctorID property of the Entity CTHNotification<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHNotification"."DoctorID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> DoctorID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHNotificationFieldIndex.DoctorID, false); }
			set	{ SetValue((int)CTHNotificationFieldIndex.DoctorID, value); }
		}

		/// <summary>The ID property of the Entity CTHNotification<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHNotification"."ID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ID
		{
			get { return (System.Int32)GetValue((int)CTHNotificationFieldIndex.ID, true); }
			set { SetValue((int)CTHNotificationFieldIndex.ID, value); }		}

		/// <summary>The KimoID property of the Entity CTHNotification<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHNotification"."KimoID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> KimoID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHNotificationFieldIndex.KimoID, false); }
			set	{ SetValue((int)CTHNotificationFieldIndex.KimoID, value); }
		}

		/// <summary>The Message property of the Entity CTHNotification<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHNotification"."Message".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Message
		{
			get { return (System.String)GetValue((int)CTHNotificationFieldIndex.Message, true); }
			set	{ SetValue((int)CTHNotificationFieldIndex.Message, value); }
		}

		/// <summary>The NotificationDate property of the Entity CTHNotification<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHNotification"."NotificationDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime NotificationDate
		{
			get { return (System.DateTime)GetValue((int)CTHNotificationFieldIndex.NotificationDate, true); }
			set	{ SetValue((int)CTHNotificationFieldIndex.NotificationDate, value); }
		}

		/// <summary>The PatientID property of the Entity CTHNotification<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHNotification"."PatientID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> PatientID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHNotificationFieldIndex.PatientID, false); }
			set	{ SetValue((int)CTHNotificationFieldIndex.PatientID, value); }
		}

		/// <summary>The PatientSymptomID property of the Entity CTHNotification<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHNotification"."PatientSymptomID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> PatientSymptomID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHNotificationFieldIndex.PatientSymptomID, false); }
			set	{ SetValue((int)CTHNotificationFieldIndex.PatientSymptomID, value); }
		}

		/// <summary>The Seen property of the Entity CTHNotification<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHNotification"."Seen".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Boolean> Seen
		{
			get { return (Nullable<System.Boolean>)GetValue((int)CTHNotificationFieldIndex.Seen, false); }
			set	{ SetValue((int)CTHNotificationFieldIndex.Seen, value); }
		}

		/// <summary>The TypeID property of the Entity CTHNotification<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CTHNotification"."TypeID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> TypeID
		{
			get { return (Nullable<System.Int32>)GetValue((int)CTHNotificationFieldIndex.TypeID, false); }
			set	{ SetValue((int)CTHNotificationFieldIndex.TypeID, value); }
		}

		/// <summary>Gets / sets related entity of type 'CTHDoctorEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHDoctorEntity CTHDoctorItem
		{
			get { return _cTHDoctorItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHDoctorItem"); }
		}

		/// <summary>Gets / sets related entity of type 'CTHKimoSurveyEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHKimoSurveyEntity CTHKimoSurveyItem
		{
			get { return _cTHKimoSurveyItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHKimoSurveyItem"); }
		}

		/// <summary>Gets / sets related entity of type 'CTHPatientEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHPatientEntity CTHPatientItem
		{
			get { return _cTHPatientItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHPatientItem"); }
		}

		/// <summary>Gets / sets related entity of type 'CTHPatientSymptomEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CTHPatientSymptomEntity CTHPatientSymptomItem
		{
			get { return _cTHPatientSymptomItem; }
			set { SetSingleRelatedEntityNavigator(value, "CTHPatientSymptomItem"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace SStorm.CTH.DAL
{
	public enum CTHNotificationFieldIndex
	{
		///<summary>ArMessage. </summary>
		ArMessage,
		///<summary>DoctorID. </summary>
		DoctorID,
		///<summary>ID. </summary>
		ID,
		///<summary>KimoID. </summary>
		KimoID,
		///<summary>Message. </summary>
		Message,
		///<summary>NotificationDate. </summary>
		NotificationDate,
		///<summary>PatientID. </summary>
		PatientID,
		///<summary>PatientSymptomID. </summary>
		PatientSymptomID,
		///<summary>Seen. </summary>
		Seen,
		///<summary>TypeID. </summary>
		TypeID,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SStorm.CTH.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CTHNotification. </summary>
	public partial class CTHNotificationRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between CTHNotificationEntity and CTHDoctorEntity over the m:1 relation they have, using the relation between the fields: CTHNotification.DoctorID - CTHDoctor.ID</summary>
		public virtual IEntityRelation CTHDoctorEntityUsingDoctorID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHDoctorItem", false, new[] { CTHDoctorFields.ID, CTHNotificationFields.DoctorID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHNotificationEntity and CTHKimoSurveyEntity over the m:1 relation they have, using the relation between the fields: CTHNotification.KimoID - CTHKimoSurvey.ID</summary>
		public virtual IEntityRelation CTHKimoSurveyEntityUsingKimoID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHKimoSurveyItem", false, new[] { CTHKimoSurveyFields.ID, CTHNotificationFields.KimoID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHNotificationEntity and CTHPatientEntity over the m:1 relation they have, using the relation between the fields: CTHNotification.PatientID - CTHPatient.ID</summary>
		public virtual IEntityRelation CTHPatientEntityUsingPatientID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHPatientItem", false, new[] { CTHPatientFields.ID, CTHNotificationFields.PatientID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CTHNotificationEntity and CTHPatientSymptomEntity over the m:1 relation they have, using the relation between the fields: CTHNotification.PatientSymptomID - CTHPatientSymptom.ID</summary>
		public virtual IEntityRelation CTHPatientSymptomEntityUsingPatientSymptomID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CTHPatientSymptomItem", false, new[] { CTHPatientSymptomFields.ID, CTHNotificationFields.PatientSymptomID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCTHNotificationRelations
	{
		internal static readonly IEntityRelation CTHDoctorEntityUsingDoctorIDStatic = new CTHNotificationRelations().CTHDoctorEntityUsingDoctorID;
		internal static readonly IEntityRelation CTHKimoSurveyEntityUsingKimoIDStatic = new CTHNotificationRelations().CTHKimoSurveyEntityUsingKimoID;
		internal static readonly IEntityRelation CTHPatientEntityUsingPatientIDStatic = new CTHNotificationRelations().CTHPatientEntityUsingPatientID;
		internal static readonly IEntityRelation CTHPatientSymptomEntityUsingPatientSymptomIDStatic = new CTHNotificationRelations().CTHPatientSymptomEntityUsingPatientSymptomID;

		/// <summary>CTor</summary>
		static StaticCTHNotificationRelations() { }
	}
}
